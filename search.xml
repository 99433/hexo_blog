<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/07/27/node_study/"/>
      <url>/2019/07/27/node_study/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-Nodejs后端语言学习"><a href="#title-Nodejs后端语言学习" class="headerlink" title="title: Nodejs后端语言学习"></a>title: Nodejs后端语言学习</h2><h1 id="·Node-js增删改查文件以及模块化"><a href="#·Node-js增删改查文件以及模块化" class="headerlink" title="·Node.js增删改查文件以及模块化"></a>·Node.js增删改查文件以及模块化</h1><h4 id="一语言和环境之间的关系"><a href="#一语言和环境之间的关系" class="headerlink" title="一语言和环境之间的关系"></a>一语言和环境之间的关系</h4><h5 id="前端-和-后端"><a href="#前端-和-后端" class="headerlink" title="前端 和 后端"></a>前端 和 后端</h5><p>​    前端主要工作</p><ol><li>页面结构</li><li>美化页面样式</li><li>书写页面的业务逻辑</li><li>使用Ajax调用后台接口</li></ol><ol><li><p>后端主要工作</p><ol><li>操作数据库</li><li>对外暴露操作数据库的API接口</li></ol></li><li><p>前后端协作开发</p><p>ECMAScript 规范</p></li></ol><h4 id="二-ECMAScript-规范"><a href="#二-ECMAScript-规范" class="headerlink" title="二,ECMAScript 规范"></a>二,ECMAScript 规范</h4><ol><li>ECMAScript 规范（标准）：就是一本书，这本书中规定了语言的特性；</li><li>浏览器中的js：<ul><li>浏览器中的 js 组成部分：ECMAScript 核心 + DOM + BOM</li></ul></li><li>Node中的js：<ul><li>Node中的 js 组成部分： ECMAScript 核心 + 全局成员 + 核心API成员</li><li>全局成员：console、setInterval、setTimeout。。。</li><li>核心 API 模块：就是 Node 平台 单独提供的一些API，这些API是Node平台所独有的；</li></ul></li></ol><h4 id="三，总结"><a href="#三，总结" class="headerlink" title="三，总结"></a>三，总结</h4><ol><li><p><strong>什么是 Node.js(我们自己给它下个定义)</strong></p><blockquote><p>就是一个服务器端的Javascript运行环境，可以让程序员，通过 Javascript 做 后台服务器编程开发</p></blockquote></li><li><p><strong>学习 Node.js 可以做什么</strong></p><ul><li>像 PHP 一样，使用 Javascript 编写符合规范的<strong>后端 API 接口</strong> 或 <strong>网站</strong></li><li>使用 Node.js 开发一些<strong>实用的工具</strong> 或 <strong>包</strong></li><li>基于 Socket 技术，开发类似于聊天室之类的<strong>即时通讯项目</strong></li><li>基于 Electron 环境，开发<strong>桌面软件</strong></li><li>ect…</li></ul></li></ol><h4 id="四、ECMAScript-6常用语法"><a href="#四、ECMAScript-6常用语法" class="headerlink" title="四、ECMAScript 6常用语法"></a>四、ECMAScript 6常用语法</h4><h5 id="4-1-let与-const"><a href="#4-1-let与-const" class="headerlink" title="4.1 let与 const"></a>4.1 let与 const</h5><ol><li>之前定义变量，用 var 关键字；有如下主要缺点：<ul><li>存在变量提升问题，降低 js 代码的可阅读性</li><li>没有块级作用域，容易造成变量污染</li></ul></li><li>let 主要特性：<ul><li>不存在变量提升问题，只有定义之后才能使用此变量</li><li>先定义再使用（暂时性死区），不可以重复定义，否则会报错</li><li>有 <code>{ }</code> 作用域</li></ul></li><li>const 主要特性：<ul><li>不存在变量提升问题，只有定义之后才能使用此变量</li><li>const 定义的<strong>常量</strong>，<em><em>无法被重新赋值</em>，因为常量无法修改，变量可修改</em></li><li>当定义常量的时候，必须定义且初始化（即需要赋值），否则报语法错误</li><li>const 定义的常量，也有 块级作用域</li><li>for循环里面定义的const常量，拥有独立的块级作用域，每次循环，都是一个新的作用域</li></ul></li></ol><h5 id="4-2-变量的解构赋值（常用）"><a href="#4-2-变量的解构赋值（常用）" class="headerlink" title="4.2 变量的解构赋值（常用）"></a>4.2 变量的解构赋值（常用）</h5><blockquote><p><strong>定义：</strong>所谓的解构赋值，就是把 某个对象中的属性，当作变量，给解放出来，这样，今后就能够当作变量直接使用了；</p></blockquote><ul><li>可以使用 <code>:</code>为解构出来的变量重命名</li></ul><pre><code>  // 变量的解构赋值  定义 let user={    name:&#39;zs&#39;,    age:20,    gender:&#39;男&#39;  } 结构赋值 const { name : name123, age, gender } = user  name : name123相当于，把变量name的值赋值给name123  console.log(name123)</code></pre><h5 id="4-3-箭头函数-常用"><a href="#4-3-箭头函数-常用" class="headerlink" title="4.3 箭头函数(常用)"></a>4.3 箭头函数(常用)</h5><ul><li>箭头函数没有自己的this，this指向<strong>定义</strong>箭头函数时所处的<strong>外部执行环境</strong>的this</li><li>即时调用call/apply/bind也无法改变箭头函数的this</li><li>箭头函数本身没有名字</li><li>箭头函数不能new，<strong>会报错</strong></li><li>箭头函数没有arguments，在箭头函数内访问这个变量访问的是<strong>外部执行环境</strong>的arguments</li><li>箭头函数没有prototype</li></ul><ol><li><p>语法：</p><ul><li><p>定义普通的 <code>function</code> 函数</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是普通 function 定义的 show 方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre></li><li><p>把方法定义为箭头函数（最完整的写法）</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> 函数体代码 <span class="token punctuation">}</span>（） <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'这是普通 function 定义的 show 方法'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> add<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p><strong>箭头函数，本质上就是一个匿名函数</strong>；</p></li><li><p><strong>箭头函数的特性</strong>： 箭头函数内部的 this, 永远和 箭头函数外部的 this 保持一致；</p></li><li><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><pre class=" language-javascript"><code class="language-javascript">btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Window</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span> <span class="token comment" spellcheck="true">// 报错</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用箭头函数后</p><pre class=" language-javascript"><code class="language-javascript">btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// &lt;button id="btn">点击&lt;button></span>        <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">"red"</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>变体</strong>：</p><ul><li>变体1：如果箭头函数，左侧的形参列表中，只有一个参数，则，左侧小括号可以省略；</li><li>变体2：如果右侧函数体中，只有一行代码，则，右侧的 <code>{ }</code> 可以省略；</li><li>变体3：如果箭头函数左侧 只有一个 形参，而且右侧只有一行代码，则 两边的 <code>()</code> 和 <code>{}</code> 都可以省略</li></ul></li><li><p><strong>注意</strong>： 如果我们省略了 右侧函数体的 <code>{ }</code>，那么，默认会把 右侧函数体中代码的执行结果，当作箭头函数的调用结果 return 出去；</p></li></ol><h5 id="4-4对象中定义属性和方法"><a href="#4-4对象中定义属性和方法" class="headerlink" title="4.4对象中定义属性和方法"></a>4.4对象中定义属性和方法</h5><p>使用快捷方式定义属性和方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"zs"</span><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">22</span><span class="token keyword">function</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是zs'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* let person = {      name: name,      age: age,      show: show}console.log(person) // {name: 'zs', age: 22, show: [Function: show]} */</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">,</span>  age<span class="token punctuation">,</span>  show<span class="token punctuation">,</span>  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// { name: 'zs', age: 22, show: [Function: show], say: [Function: say]} *</span></code></pre><h4 id="五，fs文件操作"><a href="#五，fs文件操作" class="headerlink" title="五，fs文件操作"></a>五，fs文件操作</h4><p>1，fs.readFile</p><p>// 调用 fs.readFile 方法时，提供的第一个参数是相对路径，容易出现问题</p><p>推荐使用 node 中提供的 <code>__dirname</code> 来解决 fs 模块操作文件时候的路径问题</p><pre class=" language-javascript"><code class="language-javascript">fs<span class="token punctuation">.</span>readFile读取文件<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//引入模块,默认就已经运行了'fs'</span><span class="token comment" spellcheck="true">// fs 核心模块中，提供了 fs.readFile 方法， 来读取指定目录下的文件</span><span class="token comment" spellcheck="true">// fs.readFile 有三个参数</span><span class="token comment" spellcheck="true">// 参数1： 表示要读取的文件路径</span><span class="token comment" spellcheck="true">// 参数2： 表示要以什么样的编码格式，来读取指定的文件，默认编码格式为null</span><span class="token comment" spellcheck="true">// 参数3：当文件读取完成，调用这个callback回调函数来处理读取的结果</span><span class="token comment" spellcheck="true">//       其中，第一个参数是error对象，第二个参数才是读取的结果</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//err为null，就证明成功了</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读取的数据</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取成功+'</span>data'<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//读取的数据</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    </code></pre><p>如果读取一个不存在的文件</p><p>// 读取文件失败：ENOENT：no such file or directory, open’…’</p><p>2,fs.writeFile</p><pre class=" language-javascript"><code class="language-javascript">写入文件<span class="token comment" spellcheck="true">// 1. 导入 fs 文件操作模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 调用 fs.writeFIle 写入文件</span><span class="token comment" spellcheck="true">// 参数1：路径字符串，表示要把文件内容，写入到哪个文件中</span><span class="token comment" spellcheck="true">// 参数2：要写入的数据，可以给定一个 字符串</span><span class="token comment" spellcheck="true">// 参数3：可选参数，表示要以什么格式写入文件内容， 默认以 utf8 格式写入文件 【一般默认不传递第三个参数】</span><span class="token comment" spellcheck="true">// 参数4：文件写入完成之后的 callback 回调函数</span><span class="token comment" spellcheck="true">//       在回调函数中，只有一个形参，err错误对象</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>改造成箭头函数</p><pre class=" language-javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'222'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'写入文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果在写入时，文件不存在，就直接写入，如果文件以及存在，就直接覆盖原来的内容。</p><p>3，fs.appendFile</p><pre class=" language-javascript"><code class="language-javascript">追加文件<span class="token comment" spellcheck="true">// 1. 导入 fs 文件操作模块</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 调用 fs.appendFile 追加文件内容</span><span class="token comment" spellcheck="true">// 参数1： 表示要向哪个文件中追加内容，指定一个文件的路径</span><span class="token comment" spellcheck="true">// 参数2： 表示要追加的具体的内容，可以传递的字符串内容</span><span class="token comment" spellcheck="true">// 参数3： 可选参数，表示 追加文本内容时候的编码格式 ，如果省略此参数，默认以 utf8</span><span class="token comment" spellcheck="true">// 参数4： 表示 追加完成之后的回调函数</span><span class="token comment" spellcheck="true">//        形参err表示追加失败之后的错误结果，如果err为null，表示追加成功</span>fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">'./files/2.txt'</span><span class="token punctuation">,</span> <span class="token string">'\n333'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'追加文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'追加文件成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果追加的文件路径不存在</p><pre class=" language-javascript"><code class="language-javascript"> x fs<span class="token punctuation">.</span><span class="token function">appendFile</span><span class="token punctuation">(</span><span class="token string">'./files/ssss.txt'</span><span class="token punctuation">,</span> <span class="token string">'\n333'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'追加文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'追加文件成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 如果要追加的文件路径不存在，则会先尝试创建这个文件，然后再向文件中追加内容</span></code></pre><p>4, __dirname</p><p>使用fs模块操作文件的时候，如果提供的操作路径是 相对路径，</p><p>​    则会根据当前执行node命令时的磁盘目录，去拼接提供的文件的相对路径，从而容易出现问题，例如</p><pre class=" language-javascript"><code class="language-javascript">获取当前js文件路径<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用 fs.readFile 方法时，提供的第一个参数是相对路径，容易出现问题</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败！'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>注意：在node中， __dirname 表示当前这个文件，所处的目录</p><p>​    比较完整的一次调用</p><pre class=" language-javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/files/1.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>要读取的文件，直接在当前文件下 __dirname，后面进行拼接指定的具体路径</code></pre><p><strong>5，__</strong>dirname 和 __filename 的区别</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// __dirname 表示 当前这个文件执行的时候，所处的根目录  只是代表一层目录而已；</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// __filename 表示 当前这个文件的完整路径，路径中包含了具体 的文件名</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span></code></pre><p>6，fs.stat</p><pre class=" language-javascript"><code class="language-javascript">读取指定路径的文件信息fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>如大小，创建时间，等<span class="token punctuation">)</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/files/1.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3 (3个字节)</span>    <span class="token comment" spellcheck="true">// 获取文件创建时间</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>birthtime<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2018年6月7日  18:19:11   2018-06-07T10:19:11.186Z</span>    <span class="token comment" spellcheck="true">// 判断当前是不是一个文件</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>isFile<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true </span>    <span class="token comment" spellcheck="true">// 判断是不是一个目录</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>isDirectory<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false   </span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>7.fs.copyFile</p><pre class=" language-javascript"><code class="language-javascript">复制文件fs<span class="token punctuation">.</span>copyFile<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">copyFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/files/1.txt'</span><span class="token punctuation">,</span> __dirname <span class="token operator">+</span> <span class="token string">'/files/1-copy.txt'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'拷贝失败：'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'拷贝成功！'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果目标文件以及存在，就把目标文件给覆盖</p><p>fs.readdir (path[, options], callback(err,files))读取文件夹里面的文件信息，会吧所有的文件已数组形式返回文件名称</p><h4 id="六，path路径操作"><a href="#六，path路径操作" class="headerlink" title="六，path路径操作"></a>六，path路径操作</h4><p>1 path.join</p><pre class=" language-javascript"><code class="language-javascript"> path<span class="token punctuation">.</span>join  方法使用平台特定的分隔符作为定界符将所有给定的 path 片段连接在一起，然后规范化生成的路径。<span class="token comment" spellcheck="true">// 最佳实践：以后只要涉及到路径拼接，一定要使用 path.join() 方法</span><span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./files/1.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> dataStr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>2 其他方法</p><p>path.seq</p><p>​    获取分隔符</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span>sep<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// \   :在windows中都是反斜线              </span></code></pre><p>path.basename(path)</p><p>​    path.basename() 方法返回一个 path 的最后一个部分                  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token string">'/foo/bar/baz/asdf/quux.html'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// quux.html</span></code></pre><p>path.dirname(path)</p><p>​    获取文件目录</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'c:/a/b/c/1.txt'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// c:/a/b/c</span></code></pre><p>path.extname()</p><p>​    获取文件扩展名</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token string">'c:/a/b/c/1.txt'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// .txt    </span></code></pre><p>​    总结：path提供了更多路径相关的方法    </p><ul><li>不用担心不同系统斜线的问题                     </li><li>拼接相对路径更加方便，可以逐级拼接，可以向上级目录拼接</li></ul><h4 id="七，单线程和异步（重点）"><a href="#七，单线程和异步（重点）" class="headerlink" title="七，单线程和异步（重点）"></a>七，单线程和异步（重点）</h4><blockquote><h4 id="javascript的解析和执行一直是单线程的，但是宿主环境（浏览器或者node）是多线程的"><a href="#javascript的解析和执行一直是单线程的，但是宿主环境（浏览器或者node）是多线程的" class="headerlink" title="javascript的解析和执行一直是单线程的，但是宿主环境（浏览器或者node）是多线程的"></a>javascript的解析和执行一直是单线程的，但是宿主环境（浏览器或者node）是多线程的</h4></blockquote><p>​    异步任务是由宿主环境开启子线程完成，并通过<strong>事件驱动、回调函数、队列</strong>，把完成的任务，交给主线程执行  </p><p>​    javascript引擎，一直在做一个工作，就是<strong>从任务队列里提取任务，放到主线程里执行</strong>  </p><pre><code> **JS线程**拿到一份代码，会一行一行的执行，并不关心回调，并且会把回调扔给**其他线程**。当回调的条件满足时，其他线程会把回调推到一个叫 “**异步队列**” 的地方，等待被执行。每次JS线程把 “这一轮（事件循环）” 代码执行完成后，就称为一次事件循环，本次事件循环完成后，会去检查“异步队列”里的回调，如果有回调在等候，拿出其中第一个，继续以上逻辑，进入下一轮事件循环。</code></pre><ul><li>浏览器的渲染发生在事件循环之间  </li><li>给某个函数a传入回调，并执行a，回调是否异步取决于a本身怎么调用回调  </li></ul><h5 id="1-异步执行任务的好处"><a href="#1-异步执行任务的好处" class="headerlink" title="1 异步执行任务的好处"></a>1 异步执行任务的好处</h5><p>​    作用：要把耗时的操作放到异步中执行 </p><p>​    好处：能够提高耗时任务执行的效率，提高主线程的速度，提高js解析引擎的工作效率</p><h4 id="八，-模块化"><a href="#八，-模块化" class="headerlink" title="八， 模块化"></a>八， 模块化</h4><p>​    模块化是一种开发思想，是社区的开发者为了统一规范拟定的策  </p><h5 id="1，-什么是模块化"><a href="#1，-什么是模块化" class="headerlink" title="1， 什么是模块化"></a>1， 什么是模块化</h5><pre><code>   这些都是社区制定出来的模块规范，目的都是一样的，都是为了解决javascript没有模块化系统的问题，他们都有如何定义模块成员，以及模块成员之间如何进行通信交互的规则  </code></pre><blockquote><h5 id="CMD-Common-Module-Definition-模块定义规范，"><a href="#CMD-Common-Module-Definition-模块定义规范，" class="headerlink" title="CMD (Common Module Definition) 模块定义规范，"></a>CMD (Common Module Definition) 模块定义规范，</h5></blockquote><pre><code>   就是API，别人约定好的东西，已经有实现, 国人制作的规范  </code></pre><p>​    CMD其实就是SeaJS这个模块加载器在推广过程中定义的一个模块规范  </p><blockquote><h5 id="AMD-Asynchronous-Module-Definition-，异步模块加载机制"><a href="#AMD-Asynchronous-Module-Definition-，异步模块加载机制" class="headerlink" title="AMD(Asynchronous Module Definition)，异步模块加载机制"></a>AMD(Asynchronous Module Definition)，异步模块加载机制</h5></blockquote><pre><code>   与CMD的API极其相似，几乎一样，老外制作的规范</code></pre><p>​    AMD其实就是RequireJS这个模块加载器推广过程中定义的一个模块规范</p><blockquote><h5 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h5></blockquote><p>​            NodeJS中的模块化解决方案，也是一些API</p><blockquote><h5 id="ECMAScript-6"><a href="#ECMAScript-6" class="headerlink" title="ECMAScript 6"></a>ECMAScript 6</h5></blockquote><pre><code>   这几个模块的开发者互相看不起，所以又出现了‘百家争鸣’   2015年9月份，ECMAScript官方推出了ECMAScript 6语言标准，在最新的ES6语言规范标准中，已经制定了JavaScript模块化规范，‘export import’，不过前端喜欢追赶新技术，甚至把没有推出来的标准都直接用上生产环境</code></pre><h5 id="2-什么是CommonJS规范"><a href="#2-什么是CommonJS规范" class="headerlink" title="2 什么是CommonJS规范"></a>2 什么是CommonJS规范</h5><p>是一套javascript的模块化规范，规定了 模块的特性 和 各模块之间如何相互依赖</p><p>​    特点：同步加载模块，不适合在浏览器端使用</p><p>​    要了解三个成员，</p><p>​        module是个对象表示当前这个模块</p><p>​        require是方法用来导入模块</p><p>​        exports是一个对象用来暴露成员</p><blockquote><h5 id="在浏览器端，适合使用异步的模块，比如AMD或者CMD"><a href="#在浏览器端，适合使用异步的模块，比如AMD或者CMD" class="headerlink" title="在浏览器端，适合使用异步的模块，比如AMD或者CMD"></a>在浏览器端，适合使用异步的模块，比如AMD或者CMD</h5></blockquote><h5 id="3-全局作用域和模块作用域"><a href="#3-全局作用域和模块作用域" class="headerlink" title="3 全局作用域和模块作用域"></a>3 全局作用域和模块作用域</h5><p>​    全局作用域使用 global 来访问，类似于浏览器中的window</p><h5 id="global在模块之间共享成员"><a href="#global在模块之间共享成员" class="headerlink" title="global在模块之间共享成员"></a>global在模块之间共享成员</h5><p>​    一般在企业中<strong>不推荐使用</strong>，因为会存在全局变量污染问题</p><p>​    每个javascript文件</p><h5 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h5><p>​    以下表示两个js文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true">// 注意：每个 js 文件，都是一个独立的作用域</span><span class="token comment" spellcheck="true">//      外界在 require 这个 js 文件的时候，默认无法访问 js 文件中的任何私有成员</span></code></pre><p>​    第二个文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 注意：这是 程序员使用require 导入自己的js模块</span><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./01.模块1.js'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// a is not defined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {}</span></code></pre><p>module（模块标识）</p><p>​    module属性是CommonJS规范中定义的，它是一个对象，表示一个具体的js模块；</p><p>require（引用模块）</p><p>​    每一个实现了CommonJS规范的模块，必须定义一个require()函数</p><p>​    require(‘路径’)</p><p>​    使用这个require函数，就能够很方便的导入其他 模块中的成员，供自己使用</p><p>exports（暴露模块成员）</p><p>​    每一个模块中，如果想要把自己的一些私有成员，暴露给别人使用，那么，必须实现一个module.exports对象</p><p>​    通过exports对象，可以方便的把模块内私有的成员，暴露给外界使用</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// exports 默认是属于 module</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {}</span><span class="token comment" spellcheck="true">// 默认在一个模块中，向外暴露成员，需要使用 module.exports</span><span class="token comment" spellcheck="true">// 在模块中，如果要导入其他模块，需要使用require</span></code></pre><p>使用模块作用域暴露成员</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">var</span> say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> aexports<span class="token punctuation">.</span>b <span class="token operator">=</span> bexports<span class="token punctuation">.</span>say <span class="token operator">=</span> say</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./05.m1.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// console.log(m1)</span><span class="token comment" spellcheck="true">// {a: 10}</span><span class="token comment" spellcheck="true">// console.log(m1)</span><span class="token comment" spellcheck="true">// {a: 10, b: 20}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {a: 10, b: 20, say: [Function: say]}</span></code></pre><p>6 module.exports 和 exports</p><p>​    module.exports 和 exports 默认引用了同一个空对象</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">===</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>exports <span class="token operator">===</span> exports<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// true</span></code></pre><p>​    module.exports 和 exports 作用一致，都可以向外暴露成员</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> amodule<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> b</code></pre><p>​    在另外一个文件中，找到该对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./07.test1.js'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {a: 10, b: 20}</span></code></pre><p>​    一个模块作用域中，向外暴露私有成员时，永远以 module.exports 为准</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true">// 没有以对象的方式赋值, 而是直接改写</span>exports <span class="token operator">=</span> a module<span class="token punctuation">.</span>exports <span class="token operator">=</span> b</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> m1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./07.test1.js'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {20}</span></code></pre><blockquote><h5 id="！！！为了防止一些不必要的情况发生，在开发中，推荐使用-module-exports"><a href="#！！！为了防止一些不必要的情况发生，在开发中，推荐使用-module-exports" class="headerlink" title="！！！为了防止一些不必要的情况发生，在开发中，推荐使用 module.exports"></a>！！！为了防止一些不必要的情况发生，在开发中，推荐使用 module.exports</h5></blockquote><h4 id="九，node-js中的模块和包的概念"><a href="#九，node-js中的模块和包的概念" class="headerlink" title="九，node.js中的模块和包的概念"></a>九，node.js中的模块和包的概念</h4><h5 id="1，模块成员分类"><a href="#1，模块成员分类" class="headerlink" title="1，模块成员分类"></a>1，模块成员分类</h5><p>​    模块成员，根据一些区别，又可以分为三大类： 核心模块、第三方模块、用户自定义模块</p><p>​    核心模块：node.js安装包自带的内置模块require(‘核心模块名字’)</p><p>​    第三方模块：非官方提供的，可在NPM网站下载使用require(‘第三方模块名字’)</p><p>​    用户自定义模块：用户自己项目中写的js文件，使用require(‘路径+文件名’)</p><h1 id="·Node-js全局本地包以及web服务器创建"><a href="#·Node-js全局本地包以及web服务器创建" class="headerlink" title="·Node.js全局本地包以及web服务器创建"></a>·Node.js全局本地包以及web服务器创建</h1><h4 id="一、包"><a href="#一、包" class="headerlink" title="一、包"></a>一、包</h4><p>​    1、定义</p><p>​    在模块的基础上进一步深层抽象的文件夹，里面包含了关于使用它的各种文件</p><p>​    2,、结构</p><p>​    包都要以一个单独的目录而存在</p><p>​    package.json必须在包的顶层目录下</p><p>​    package.json必须要符合JSON格式，并且必须包含如下三个属性：</p><p>​        name：包的名字</p><p>​        version：包的版本号</p><p>​        main：表示包的入口文件</p><p>​    二进制文件应该在bin目录下，javascript代码应该在bin目录下，文档应该在doc目录下，单元测试应该在test目录下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*    name: 包的名称，必须是唯一    description：包的简要说明    version：符合语义化版本识别规范的版本字符串    keywords：关键字数据，通常用于搜索    maintainers： 维护者数组，每个元素都要包含name、email、web可选字段    contributors：贡献者数组，格式与maintainers相同，包的作者应该是贡献者数据的第一个元素    bugs：提交bug的地址，可以是网址或者电子邮件地址    licenses：许可证数组，每个元素要包含type和url字段    repositories：仓库托管地址数组，每个元素要包含type、url和path字段    dependencies：包的依赖，一个关联数组，由包名称和版本号组成    devDependencies：开发者依赖项，表示一个包在开发期间用到的依赖项*/</span></code></pre><p>​        在lib中添加了功能js之后，main.js负责导入并暴露成员</p><p>​        导入const add = require(‘./add.js’)</p><p>​        暴露module.exports = {add}</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在导入包的时候，require的名字，必须是包文件夹的名字，而且只有把包放在 node_modules目录中才可以直接使用名称</span><span class="token keyword">const</span> calc <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'calc'</span><span class="token punctuation">)</span></code></pre><h4 id="二、npm"><a href="#二、npm" class="headerlink" title="二、npm"></a>二、npm</h4><p>​    npm是一个第三方模块的托管网站，指的就是 ‘<a href="https://www.npmjs.com&#39;" target="_blank" rel="noopener">https://www.npmjs.com&#39;</a></p><p>​    npm是node的节点包管理器工具，安装node软件的时候，就已经自动安装了这个管理工具</p><p>​    nrm是节点资源管理</p><p>​    nrm ls   资源下载网站</p><p>​    修改资源下载网站 nrm use cnpm     （nrm use taobao） —–nrm use  网站名</p><p>​    测试网站响应速度nrm test 网站名</p><p>​    包名   -v  查看包的版本</p><h5 id="1，安装和卸载全局包-i5ting-toc"><a href="#1，安装和卸载全局包-i5ting-toc" class="headerlink" title="1，安装和卸载全局包(i5ting_toc)"></a>1，安装和卸载全局包(i5ting_toc)</h5><p>​        （1）安装： npm install(简写i) 包名 -g       =&gt;  -g指的是全局，不加就为本地</p><p>​        （2）运行： 包名 -f      路径</p><p>​        （3）卸载： npm uninstall(简写un)  包名  -g </p><pre><code>npm install i5ting_toc -g  //安装i5ting_toc -f ./node基础_day02.md   //运行npm uninstall i5ting_toc -g   //卸载</code></pre><pre><code>需要安装的包npm i nrm -g   ------   安装nrm包，用于修改下载包的网站npm install i5ting_toc -g  ------安装i5ting_toc包cnpm i nodemon -g     ------安装nodemon包npm i gulp -gnpm i router -g -----安装路由模块npm cache clean --force    ------清除缓存</code></pre><p>##### </p><h5 id="2-安装和卸载本地包"><a href="#2-安装和卸载本地包" class="headerlink" title="2 安装和卸载本地包"></a>2 安装和卸载本地包</h5><p>跟着项目安装的包叫做本地包，本地包都会被安装到 node_modules 目录下</p><p>（1）创建：空文件夹项目需要在根目录，运行npm init或者 npm init -y命令，    初始化一个package.json的配置文件，否则包无法安装到本地项目中 </p><p>(2)安装：npm i 包名  –save(简写-S,如果npm是5.x以上版本，可以不写–save)</p><p>（3）package-lock.json 文件中记录了曾经装过的包下载地址，方便下次直接下载包，能够加快装包的速度，提升装包体验</p><p>（4）卸载：npm uninstall/remove 包名 -s/-D 即可卸载指定的本地包</p><pre><code>npm i  检索package 下载所有依赖包需要安装的本地包jqueryart-templateexpress框架ejs模板引擎 mysql数据库semantic-ui框架npm i express-session   安装sessionnpm i cors -S    后台安装跨域模块</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*    --save 的缩写是 -S    --save-dev 的缩写是 -D    install 的缩写是 i    dependencies 节点，表示项目上线部署时候需要的依赖项    devDependencies节点，表示项目在开发阶段需要的依赖项，但是当项目要部署上线了，这里的包就不需要了    当使用npm i快速装包的时候，npm会检查package.json文件中，所有的依赖项，然后安装到项目中    --production 表示只安装dependencies节点记录的包，不安装devDependencies节点下的包，一般项目上线才用*/</span></code></pre><p>初始化： package.json</p><p>npm init -y</p><h4 id="三、http模块–web服务器创建"><a href="#三、http模块–web服务器创建" class="headerlink" title="三、http模块–web服务器创建"></a>三、http模块–web服务器创建</h4><p>​    在node中，不需要apache一样的web容器</p><p>​    B/S：特指基于浏览器和服务器这种交互形式</p><h5 id="1、创建服务器"><a href="#1、创建服务器" class="headerlink" title="1、创建服务器"></a>1、创建服务器</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.0 导入http核心模块</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.0 创建web服务器对象</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 创建服务器</span><span class="token comment" spellcheck="true">// 3.0 绑定事件，监听请求</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// req表示客户端相关参数</span>      <span class="token comment" spellcheck="true">// res表示和服务器相关的参数和方法 </span>  设置响应报文头的Content<span class="token operator">-</span>Type，来指定响应内容的编码类型，从而防止乱码  text<span class="token operator">/</span>html<span class="token operator">--</span><span class="token operator">--</span>文档类型，返回页面不需要设置响应头，因为html页面有申明 res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.1 end方法可以返回数据</span>      <span class="token comment" spellcheck="true">//req.url可以获取用户请求的url地址，如index</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4.0 启动服务，设置ip地址和端口</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server runnig at 127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="2、模板引擎渲染页面"><a href="#2、模板引擎渲染页面" class="headerlink" title="2、模板引擎渲染页面"></a>2、模板引擎渲染页面</h5><pre class=" language-javascript"><code class="language-javascript">npm init <span class="token operator">-</span>y<span class="token comment" spellcheck="true">//初始化</span>npm i art<span class="token operator">-</span>template<span class="token comment" spellcheck="true">//安装模板引擎</span></code></pre><p>后端内容</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url    <span class="token keyword">if</span><span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 使用模板渲染页面</span>          <span class="token comment" spellcheck="true">// 参数1：要渲染的HTML页面的路径，</span>          <span class="token comment" spellcheck="true">// 参数2：要渲染的数据，没有数据的话，给一个 {} 对象</span>          <span class="token comment" spellcheck="true">// 返回值：渲染好的HTML内容，直接通过res.send发送给客户端</span>          <span class="token keyword">const</span> htmlStr <span class="token operator">=</span> <span class="token function">template</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/views/1.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>          age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>          hobby<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'吃饭'</span><span class="token punctuation">,</span> <span class="token string">'唱歌'</span><span class="token punctuation">,</span> <span class="token string">'跳舞'</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'3000'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server is running at 127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>前端内容</p><p>​    模板引擎的语法</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个动态渲染的页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span> 通过 Node 服务器，结合 art-template 模板引擎渲染的动态页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>姓名： {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>年龄： {{ age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>爱好：         {{ each hobby }}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ $value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        {{ /each }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="·Express框架，"><a href="#·Express框架，" class="headerlink" title="·Express框架，"></a>·Express框架，</h1><p>​    Express框架是一个基于Node.js的框架，对http模块进行了更强大的封装</p><p>​    也就是不再使用之前的http模块，而是使用express的方式处理  <strong>请求</strong></p><p>​    <code>npm i express -S</code></p><h4 id="1-使用express快速创建服务器"><a href="#1-使用express快速创建服务器" class="headerlink" title="1  使用express快速创建服务器"></a>1  使用express快速创建服务器</h4><ul><li>通过 <code>app.get()</code> 或 <code>app.post()</code> 方法，来监听客户端的 <code>get</code> 或 <code>post</code> 请求，具体语法：<ul><li><strong>监听 <code>GET</code> 请求：</strong><code>app.get(&#39;请求地址&#39;, (req, res) =&gt; { 处理函数 })</code> </li><li><strong>监听 <code>POST</code> 请求：</strong> <code>app.post(&#39;请求地址&#39;, (req, res) =&gt; { 处理函数 })</code> </li></ul></li><li><strong>启动 express 服务器：</strong>通过 <code>app.listen(端口, IP地址, 启动成功后的回调函数)</code> 启动服务器；</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.0 导入模块</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.0 创建web服务器app对象</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.0 app.get方法，监听用户请求，指定用户请求的地址和回调函数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// res.end('hello world.') 不能直接识别中文，需要写响应头</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'你好世界。'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4.0 启动服务器</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="2-快捷方法"><a href="#2-快捷方法" class="headerlink" title="2 快捷方法"></a>2 快捷方法</h4><p>​    res.send([body|status], [body])   发送内容</p><p>​    即既可以直接发送内容，也可以第一个参数状态，第二个参数内容。</p><p>​    如果直接发送内容的话，状态会被自动补全；</p><p>简单来说就是   如果服务器端没有数据返回到客户端 那么就可以用 res.end</p><p>但是 如果 服务器端有数据返回到客户端 这个时候必须用res.send ,不能用 res.end（会报错）</p><p><strong>发送的内容：</strong></p><p>示例：</p><pre><code>res.send(newBuffer(&#39;whoop&#39;)); 发送二进制(binary)内容，Content-Type 会被                            设置为 &quot;application/octet-stream&quot; ，res.send({ some: &#39;json&#39; });res.send(&#39;some html&#39;);    假如发送字符串，那么将被解释为html文件；                        也就是说，Content-Type 默认设置为&quot;text/html&quot;:res.send(404, &#39;Sorry, we cannot find that!&#39;);res.send(500, { error: &#39;something blew up&#39; });res.send(200);    假如参数为Array（数组），或者Ojbect（对象），那么将返回                    一个JSON；</code></pre><p>res.sendFile()  发送页面</p><ul><li>用法1：<code>res.sendFile(path.join(__dirname, &#39;./view/index.html&#39;))</code></li><li>用法2：<code>res.sendFile(&#39;./view/movie.html&#39;, { root: __dirname })</code></li><li>注意：<code>res.sendFile()</code> 可以向浏览器发送 静态页面；</li></ul><h4 id="3-托管静态资源文件"><a href="#3-托管静态资源文件" class="headerlink" title="3 托管静态资源文件"></a>3 托管静态资源文件</h4><p>​    app.use() 是注册中间件</p><p>​    express.static() 是中间件的一种，()里面指定托管的静态目录，目录中包含要访问的页面，可以直接被访问</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1. express.static() 可以把指定目录托管为静态目录，这样请求的页面可以直接访问</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2. 指定虚拟目录   127.0.0.1:3000/public/views/index.html</span><span class="token comment" spellcheck="true">// app.use('public', express.static('./views'))</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4基于-express的模板引擎ejs"><a href="#4基于-express的模板引擎ejs" class="headerlink" title="4基于 express的模板引擎ejs"></a>4基于 express的模板引擎ejs</h4><p><code>npm i ejs -S</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.0 设置模板引擎的方式</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.0 设置veiws指向模板文件的目录</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./ejs_pages'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 3.0 调用response的render，参数1：模板文件路径，参数2：数据对象</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.ejs'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'ls'</span><span class="token punctuation">,</span>         age<span class="token punctuation">:</span> <span class="token number">108</span><span class="token punctuation">,</span>         hobby<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'majoog'</span><span class="token punctuation">,</span> <span class="token string">'kongfu'</span><span class="token punctuation">,</span> <span class="token string">'food'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>​    index.ejs 模板文件</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是ejs渲染的内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>姓名：&lt;%= name %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>年龄：&lt;%= age %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>爱好：        &lt;% hobby.forEach(item => { %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>&lt;%= item %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">})</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="5art-template模板"><a href="#5art-template模板" class="headerlink" title="5art-template模板"></a>5art-template模板</h4><pre><code>npm i art-template express-art-template -S</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.0 定义模板引擎的名称</span>app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.0 定义模板引擎的方式</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.0 定义views指向的渲染目录</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./art_pages'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 4.0 调用render方法进行渲染</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>        books<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'三国演义'</span><span class="token punctuation">,</span> <span class="token string">'红楼梦'</span><span class="token punctuation">,</span> <span class="token string">'西游记'</span><span class="token punctuation">,</span> <span class="token string">'名侦探柯南'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这里是art-template渲染的模板数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>姓名： {{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>年龄： {{ age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>        四大名著        {{ each books }}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{ $index }} ---  {{ $value }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        {{ /each }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="6封装路由模块"><a href="#6封装路由模块" class="headerlink" title="6封装路由模块"></a>6封装路由模块</h4><p>在开发中，经常会使用分模块开发，在不同的模块处理不同的业务，比如像处理客户端请求这个事情，是很繁琐的，所以不需要在主文件中进行，而转交一个路由模块处理</p><h5 id="1-服务模块"><a href="#1-服务模块" class="headerlink" title="1 服务模块"></a>1 服务模块</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.0 导入路由模块</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./07.router.js'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.0 使用路由功能</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at 127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="2-路由模块07-router-js-被使用的外部文件"><a href="#2-路由模块07-router-js-被使用的外部文件" class="headerlink" title="2 路由模块07.router.js(被使用的外部文件)"></a>2 路由模块07.router.js(被使用的外部文件)</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.0 创建路由对象</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.0 使用路由对象的方法处理客户端请求</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">'./views/index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> __dirname <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/movie'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">'./views/movie.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> __dirname <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">'./views/about.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> root<span class="token punctuation">:</span> __dirname <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.0 向外暴露模块</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router</code></pre><h4 id="7中间件"><a href="#7中间件" class="headerlink" title="7中间件"></a>7中间件</h4><h5 id="1-五种中间件"><a href="#1-五种中间件" class="headerlink" title="1 五种中间件"></a>1 五种中间件</h5><ul><li>应用级别中间件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//应用级别中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time:'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>路由级别中间件</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//路由级别中间件</span>router<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time:'</span><span class="token punctuation">,</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li><p>错误处理中间件</p><p>回调函数中，有四个参数 <code>app.use((err, req, res, next)=&gt;{})</code></p></li><li><p>唯一内置中间件</p></li></ul><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><strong>第三方中间件</strong>（由个人/第三方开发的中间件）</li></ul><h5 id="2-中间件案例"><a href="#2-中间件案例" class="headerlink" title="2 中间件案例"></a>2 中间件案例</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 导入处理查询字符串的模块</span><span class="token keyword">const</span> querystring <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.0 定义中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> dataStr <span class="token operator">=</span> <span class="token string">''</span>    <span class="token comment" spellcheck="true">// 1.1 注册data事件，接收数据片段chunk</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        dataStr <span class="token operator">+</span><span class="token operator">=</span> chunk    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1.2 注册end事件，代表请求结束，打印数据，并且调用next方法执行后续操作</span>    req<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 把 username=ls&amp;password=123456 解析成 {username: 'ls', password: 123456}</span>      <span class="token comment" spellcheck="true">//***将get得到的字符串参数，分割成一个对象****</span>      <span class="token comment" spellcheck="true">//querystring.parse()</span>        <span class="token keyword">let</span> obj <span class="token operator">=</span> querystring<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>dataStr<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//将处理得到的obj通过req.body挂载</span>        req<span class="token punctuation">.</span>body <span class="token operator">=</span> obj        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 应用级别的中间件</span><span class="token comment" spellcheck="true">// 2.0 处理开始的请求根目录页面文件</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">'./09-form.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>root<span class="token punctuation">:</span> __dirname<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.0 通过form表单发送一个post请求</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/postdata'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//得到上个中间件处理得到的数据</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'假如说这是请求之后的页面'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>演示中间件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/postdata<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            用户名： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            密码： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h4 id="8数据库连接和操作"><a href="#8数据库连接和操作" class="headerlink" title="8数据库连接和操作"></a>8数据库连接和操作</h4><p>在操作数据库之前，需要启动 PHPstudy， 因为它内部集成了mysql的环境</p><h5 id="1-在数据库中新建数据"><a href="#1-在数据库中新建数据" class="headerlink" title="1 在数据库中新建数据"></a>1 在数据库中新建数据</h5><p>​    1， 连接数据库，连接名随便取</p><p>​    2，创建数据库，数据库名是连接的时候需要的名称</p><p>​    3，创建表，名字慎重，因为操作的就是这个表名</p><h5 id="2-创建数据库连接和查询"><a href="#2-创建数据库连接和查询" class="headerlink" title="2 创建数据库连接和查询"></a>2 创建数据库连接和查询</h5><pre><code>npm i mysql -S</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token keyword">const</span> conn <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    database<span class="token punctuation">:</span> <span class="token string">'hangzhou01'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.0 调用查询语句  参数1：sql语句  参数2：回调函数</span><span class="token keyword">const</span> sqlStr1 <span class="token operator">=</span> <span class="token string">'select * from users'</span><span class="token comment" spellcheck="true">// ！！！注意，这里第二个参数是回调函数</span>conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr1<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败，原因是：'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="3-新增"><a href="#3-新增" class="headerlink" title="3 新增"></a>3 新增</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span>  <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'小黄'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> gender<span class="token punctuation">:</span> <span class="token string">'女'</span><span class="token punctuation">}</span><span class="token keyword">const</span> sqlStr2 <span class="token operator">=</span> <span class="token string">'insert into users set ?'</span><span class="token comment" spellcheck="true">// ！！！ 这里函数接收的第二个参数是 第一条数据的名称</span>conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr2<span class="token punctuation">,</span> user<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'新增失败，原因是：'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="4-修改"><a href="#4-修改" class="headerlink" title="4 修改"></a>4 修改</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span>  <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'小绿'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token keyword">const</span> sqlStr3 <span class="token operator">=</span> <span class="token string">'update users set ? where id = ?'</span><span class="token comment" spellcheck="true">// ！！！这里传入的第二个参数是一个数组，并且要和上面的数组一一对应上</span>conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr3<span class="token punctuation">,</span> <span class="token punctuation">[</span>user<span class="token punctuation">,</span> user<span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'修改失败，原因是：'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="5-删除"><a href="#5-删除" class="headerlink" title="5 删除"></a>5 删除</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> user <span class="token operator">=</span>  <span class="token punctuation">{</span>id<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'小绿'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token keyword">const</span> sqlStr2 <span class="token operator">=</span> <span class="token string">'delete from users where id = ?'</span><span class="token comment" spellcheck="true">// ！！！这里的第二个参数是对应的id</span>conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除失败，原因是：'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h1 id="模块加载机制以及req的方法"><a href="#模块加载机制以及req的方法" class="headerlink" title="模块加载机制以及req的方法"></a>模块加载机制以及req的方法</h1><h4 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h4><p>模块引入时，会先执行一遍，然后放入内存中，</p><p>任何模块加载前都会先去缓存查找</p><p>如果缓存中没有，就去文件/文件夹中查找，(如果加载没有后缀名的文件，即模糊查找)</p><p>① <strong>文件</strong>模糊查找规则：</p><ol><li><p>无后缀的文件</p></li><li><p><code>.js</code>后缀的文件</p></li><li><p><code>.json</code>后缀的文件</p></li><li><p><code>.node</code>后缀的文件</p><p>查找机制——如：index=&gt;index.js=&gt;index.json=&gt;index.node</p></li></ol><p>② <strong>文件夹</strong>内搜索规则：</p><ol><li>文件夹根目录中的 <code>package.json</code>的<code>main</code>字段指定的文件</li><li>文件夹根目录中以 <code>index</code> 为关键字进行文件模糊查找 ①</li></ol><ul><li><code>require(&#39;test&#39;)</code><ul><li>是否是核心模块</li><li>在node_modules中以 <code>test</code> 为关键字进行文件模糊查找  ①</li><li>在node_modules中对 <code>test</code> 文件夹进行搜索  ②</li><li>在上一级目录的node_modules中重复上面的步骤</li></ul></li><li><code>require(&#39;./test.js&#39;)</code><ul><li>是否有此文件</li></ul></li><li><code>require(&#39;./test&#39;)</code><ul><li>在指定的目录中以 <code>test</code> 为关键字进行文件模糊查找 ①</li><li>在指定的目录中对 <code>test</code> 文件夹进行搜索  ②</li></ul></li><li><code>require(&#39;./test/&#39;)</code><ul><li>在指定的目录中对 <code>test</code> 文件夹进行搜索  ②</li></ul></li></ul><h4 id="req方法"><a href="#req方法" class="headerlink" title="req方法"></a>req方法</h4><p>1 req.query获取查询参数</p><p><code>npm init -y</code></p><p>​    <code>npm i express -S</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>2.2 req.params获取路径参数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/user/:id/:name'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>req.body获取POST请求表单数据</p><p>​    <code>npm i body-parser -S</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>extended<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果是true则支持嵌套的urlencoded数据，就是允许接收嵌套数据，如对象/数组</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h1 id="跨域及解决办法"><a href="#跨域及解决办法" class="headerlink" title="跨域及解决办法"></a>跨域及解决办法</h1><h4 id="1，跨域"><a href="#1，跨域" class="headerlink" title="1，跨域"></a>1，跨域</h4><p><strong>浏览器</strong>在给后端发送<strong>ajax请求</strong>的时候，如果触犯下列条件之一，就会涉及到跨域问题。</p><ol><li>协议不同</li><li>域名不同</li><li>端口不同</li></ol><p>跨域的限制只存在于浏览器中，脱离浏览器的环境发送请求则不存在跨域的限制</p><h4 id="2，JSONP和CORS的区别"><a href="#2，JSONP和CORS的区别" class="headerlink" title="2，JSONP和CORS的区别"></a>2，JSONP和CORS的区别</h4><ol><li>JSONP的原理：动态创建script标签；</li></ol><ul><li>JSONP发送的不是Ajax请求</li><li>不支持 Post 请求；</li></ul><ol><li>CORS中文意思是<code>跨域资源共享</code> ,需要服务器端进行 <code>CORS</code> 配置；</li></ol><ul><li>服务器按照<code>CORS</code>的规则进行响应后，前端发出跨域的Ajax请求响应时，就不会再被浏览器拦截，可以正常获取数据 ；</li></ul><ol><li><p>对于Node来说，如果想要开启 CORS 跨域通信，只需要安装<code>cors</code>的模块即可；</p></li><li><p>如果出现跨域，那么需要在 <strong>后端项目</strong> 的 server.js 中下载 cors 模块，并且导入</p><p>​    <code>npm i cors -S</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入cors模块</span><span class="token keyword">const</span> cors <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cors'</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>​</p></li></ol><h4 id="node-js操控数据库"><a href="#node-js操控数据库" class="headerlink" title="node.js操控数据库"></a>node.js操控数据库</h4><p>// 导入数据库模块，创建数据库连接<br>const mysql = require(‘mysql’)<br>const conn = mysql.createConnection({</p><pre class=" language-javascript"><code class="language-javascript">host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>user<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>database<span class="token punctuation">:</span> <span class="token string">'node_item'</span></code></pre><p>})</p><p>获取数据</p><p> let sqlStr = ‘SELECT * FROM heros’</p><pre class=" language-javascript"><code class="language-javascript">conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         status<span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>         msg<span class="token punctuation">:</span> err<span class="token punctuation">.</span>message<span class="token punctuation">,</span>         data<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 4.2 返回请求的数据</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>         status<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>         msg<span class="token punctuation">:</span> <span class="token string">'ok'</span><span class="token punctuation">,</span>         data<span class="token punctuation">:</span> result     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>添加数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导入解析表单post提交时传输的数据</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//sql语句</span><span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token string">'insert into heros set ?'</span><span class="token comment" spellcheck="true">//执行数据库</span>conn<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span>获取前台得到的数据req<span class="token punctuation">.</span>body<span class="token punctuation">,</span>callback<span class="token punctuation">)</span></code></pre><p>获取指定数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token string">'SELECT * FROM heros WHERE id = ?'</span></code></pre><p>根据id修改数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token string">'update heros set ? where id = ?'</span></code></pre><p>软删除数据（修改特定的状态）</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">let</span> sql <span class="token operator">=</span> <span class="token string">'update heros set isdel = 1 where id = ?'</span></code></pre><h1 id="semantic-ui框架"><a href="#semantic-ui框架" class="headerlink" title="semantic-ui框架"></a>semantic-ui框架</h1><h3 id="全局安装Gulp"><a href="#全局安装Gulp" class="headerlink" title="全局安装Gulp"></a>全局安装Gulp</h3><p>​    <code>npm i gulp -g</code></p><p><img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/downGulp.jpg?lastModify=1562504352" alt="img"></p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>​    <code>npm init -y</code></p><p><img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/web-init.jpg?lastModify=1562504390" alt="img"><img src="images%5Cweb-init.jpg" alt="web-init"></p><h3 id="6-3-下载semantic-ui"><a href="#6-3-下载semantic-ui" class="headerlink" title="6.3 下载semantic-ui"></a>6.3 下载semantic-ui</h3><p>​    <code>npm i semantic-ui -S</code></p><p><img src="images%5Cautosemantic.jpg" alt="autosemantic"></p><p><img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/autosemantic.jpg?lastModify=1562504404" alt="img"></p><h3 id="6-4-进程操作"><a href="#6-4-进程操作" class="headerlink" title="6.4 进程操作"></a>6.4 进程操作</h3><p><img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/semantic-yes.jpg?lastModify=1562504414" alt="img"></p><p><img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/semantic-ok.jpg?lastModify=1562504414" alt="img"></p><p><img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/semantic-all.jpg?lastModify=1562504438" alt="img"></p><h3 id="6-5-使用gulp工具完成操作"><a href="#6-5-使用gulp工具完成操作" class="headerlink" title="6.5 使用gulp工具完成操作"></a>6.5 使用gulp工具完成操作</h3><p>​    <code>cd semantic</code></p><p>​    <code>gulp build</code></p><p><img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/semantic-gulp.jpg?lastModify=1562504450" alt="img"></p><h3 id="在项目中配置和使用semantic-ui"><a href="#在项目中配置和使用semantic-ui" class="headerlink" title="在项目中配置和使用semantic-ui"></a>在项目中配置和使用semantic-ui</h3><p>​    在项目中配置 semantic-ui ，其实就是让 views 目录里面的html文件引入外面文件夹的文件</p><p>​        如果是直接在 views 里面，由于托管了，所以不需要再设置什么</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 托管 views 文件夹下的文件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 托管 semantic 文件夹里的静态资源</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/semantic'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./semantic'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/node_modules'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3001</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server running at http://127.0.0.1:3001'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>说明</p><p>​    将 views 文件夹托管了，那么在访问页面的时候</p><p>​    本应该是 <code>127.0.0.1:3001/views/index.html</code></p><p>​    现在访问方式 <code>127.0.0.1:3001</code></p><p>​    原因是托管出去的文件夹，在请求文件的时候，语法不允许再写这个文件夹</p><h1 id="总结MVC三层之间的调用关系"><a href="#总结MVC三层之间的调用关系" class="headerlink" title="总结MVC三层之间的调用关系"></a>总结MVC三层之间的调用关系</h1><h4 id="封装-controller-业务处理模块"><a href="#封装-controller-业务处理模块" class="headerlink" title="封装 controller 业务处理模块"></a>封装 controller 业务处理模块</h4><p>​    封装的目的是为了保证每个模块的职能单一性，对于路由模块来说，</p><p>​    只需要分配 url 地址到 处理函数之间的关系，而不需要关心处理请求的具体实现</p><h4 id="MVC-三层架构开发思想"><a href="#MVC-三层架构开发思想" class="headerlink" title="MVC 三层架构开发思想"></a>MVC 三层架构开发思想</h4><p>​    M: Model 数据库操作层</p><p>​    V: View 页面视图层</p><p>​    C: Controller 业务处理层</p><p>​    M: Model 数据库操作层</p><p>​    V: View 页面视图层</p><p>​    C: Controller 业务处理层</p><p><img src="file://F:%5Citem%5C%E5%B0%B1%E4%B8%9A%E7%8F%AD%5Cday45-nodejs%5C%E7%AC%94%E8%AE%B0%5Cimages%5Cmvc.jpg?lastModify=1562505441" alt="img"></p><p>​    在 views 文件夹里面创建适合自己的模板页面，在页面中涉及到逻辑交互或者事件，发送异步请求</p><p>​    在 router 文件夹中 去挂载对应关系，去监听每一个请求，处理请求找到业务处理函数</p><p>​    在业务处理层 controller 中需要连接数据库， 那么再去请求 db 文件夹中的模块</p><p>​    在 views 文件夹里面创建适合自己的模板页面，在页面中涉及到逻辑交互或者事件，发送异步请求</p><p>​    在 router 文件夹中 去挂载对应关系，去监听每一个请求，处理请求找到业务处理函数</p><p>​    在业务处理层 controller 中需要连接数据库， 那么再去请求 db 文件夹中的模块</p><h1 id="Cookie-和-Session"><a href="#Cookie-和-Session" class="headerlink" title="Cookie 和 Session"></a>Cookie 和 Session</h1><h4 id="Cookie-的基本使用"><a href="#Cookie-的基本使用" class="headerlink" title="Cookie 的基本使用"></a>Cookie 的基本使用</h4><p>//http是无状态的，浏览器在看到响应头里有set-cookie这个字段，会自动把相应的值存在cookie中<br>// 1. 定义：cookie 就是存储在客户端（浏览器）的一小段文本<br>// 2. cookie 是一门客户端的技术，因为 cookie 是存储在客户端的<br>// 3. cookie 的作用，是为了实现 客户端与 服务器端之间的状态保持<br>// 4. cookie 技术不安全，不要使用它保存一些 敏感数据<br>浏览器看到响应头里的set-cookie字段，会自动把相应的值存储在浏览器的cookie中<br>浏览器再次发起请求是，会默认自动在请求头的cookie字段带上此域名下的所有cookie</p><h3 id="使用-Cookie-的-expires"><a href="#使用-Cookie-的-expires" class="headerlink" title="使用 Cookie 的 expires"></a>使用 Cookie 的 expires</h3><p>​    如果响应头不设置过期时间，那么此cookie 是一个临时cookie，默认只在浏览器页面关闭之后就失效了，</p><p>如果想指定 cookie 的时效，就是过期时间，到了过期时间，浏览器就自动<strong>删除</strong>当前cookie ，</p><p>响应头返回的data字段以及cokie中expires设置的时间时间都是服务器时间，</p><p>​    需要指定 cookie 的 expires 属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 设置 cookie</span><span class="token keyword">const</span> expiresTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span><span class="token function">writeHeader</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'text/html; charset=utf-8'</span><span class="token punctuation">,</span>    <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'isvisit=yes; expires='</span> <span class="token operator">+</span> expiresTime<span class="token punctuation">,</span> <span class="token string">'test=ook'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="Session-的原理"><a href="#Session-的原理" class="headerlink" title="Session 的原理"></a>Session 的原理</h3><p>​    <img src="file:///F:/item/%E5%B0%B1%E4%B8%9A%E7%8F%AD/day45-nodejs/%E7%AC%94%E8%AE%B0/images/Session.png?lastModify=1562505525" alt="img"></p><h3 id="在项目中安装-express-session"><a href="#在项目中安装-express-session" class="headerlink" title="在项目中安装 express-session"></a>在项目中安装 express-session</h3><p>​    </p><h4 id="步骤1：安装模块和导入"><a href="#步骤1：安装模块和导入" class="headerlink" title="步骤1：安装模块和导入"></a>步骤1：安装模块和导入</h4><p>​    <code>npm i express-session -S</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span></code></pre><h4 id="步骤2：使用中间件"><a href="#步骤2：使用中间件" class="headerlink" title="步骤2：使用中间件"></a>步骤2：使用中间件</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置cookie的过期时间</span><span class="token keyword">const</span> expiresTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">160</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 启用 session 中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  secret<span class="token punctuation">:</span> <span class="token string">'keyboard cat'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 相当于一个加密钥匙，值可以是任意字符串</span>  resave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 强制 session 保存到 session store 中</span>  saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 强制没有'初始化'的 session 保存到 storage 中</span>  <span class="token comment" spellcheck="true">//添加入cookie的过期时间</span>  cookie<span class="token punctuation">:</span> <span class="token punctuation">{</span>        expires<span class="token punctuation">:</span> expiresTime    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="步骤3：保存到session"><a href="#步骤3：保存到session" class="headerlink" title="步骤3：保存到session"></a>步骤3：保存到session</h4><p>​    将私有的数据保存到当前请求的 session 会话中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 将登录的用户保存到 session 中</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user <span class="token operator">=</span> result<span class="token punctuation">.</span>dataValues<span class="token comment" spellcheck="true">// 设置是否登录为 true</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>isLogin <span class="token operator">=</span> <span class="token boolean">true</span></code></pre><h4 id="步骤4：清空数据的方法"><a href="#步骤4：清空数据的方法" class="headerlink" title="步骤4：清空数据的方法"></a>步骤4：清空数据的方法</h4><p>​    通过 destroy() 方法清空 session 数据</p><pre class=" language-javascript"><code class="language-javascript">req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户退出成功'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 实现服务器的跳转，这个对比于客户端的跳转</span>    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>抽离公共模块到单独的页面，然后引入</p><pre><code>&lt;%- include(&#39;./layout/header.ejs&#39;) %&gt;    &lt;h1&gt;文章列表&lt;/h1&gt;&lt;%- include(&#39;./layout/footer.ejs&#39;) %&gt;</code></pre><h1 id="抽离公共模块的方法"><a href="#抽离公共模块的方法" class="headerlink" title="抽离公共模块的方法"></a>抽离公共模块的方法</h1><!--在引入页面--><div class="footer"></div><p>/<em>导入脚部页面</em>/<br>$(document).ready(function(){<br>   $(“.footer”).load(“page/footer.html”);<br>});</p><!--抽离footer.html页面，做被引入页面--><footer>   <ul class="g-flex">​      <li><a href="#">活动XXX</a></li>​      <li><a href="#">列表XXX</a></li>​      <li><a href="#">产权XXX</a></li>​      <li><a href="#">我们XXX</a></li>   </ul></footer>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>代码托管工具教程-gitHub</title>
      <link href="/2019/07/27/git_study/"/>
      <url>/2019/07/27/git_study/</url>
      
        <content type="html"><![CDATA[<h3 id="配置使用者的用户名和邮箱-··04-git-config-list查看"><a href="#配置使用者的用户名和邮箱-··04-git-config-list查看" class="headerlink" title="配置使用者的用户名和邮箱 ··04 git config --list查看"></a>配置使用者的用户名和邮箱 ··04 <code>git config --list</code>查看</h3><ul><li>配置全局用户名 命令 <code>git config --global user.name &#39;klxin&#39;</code></li><li>配置全局用户邮箱 <code>git config --global user.email &#39;xinkailun@itcast.com&#39;</code></li><li>删除配置的用户名和邮箱 <code>git config --global --unset user.name</code></li></ul><p>全局用户名：pengwang</p><p>邮箱 ：<a href="mailto:592394158@qq.com" target="_blank" rel="noopener">592394158@qq.com</a></p><h3 id="初始化git仓储-git-init"><a href="#初始化git仓储-git-init" class="headerlink" title="初始化git仓储 git init"></a>初始化git仓储 <code>git init</code></h3><ul><li>自己建的项目目录文件夹内 右键 打开 Git Bash Here</li></ul><h3 id="把代码放到Git仓库"><a href="#把代码放到Git仓库" class="headerlink" title="把代码放到Git仓库"></a>把代码放到Git仓库</h3><p>git add  文件名  //文件放入小车</p><p>git commit -m “本次提交描述” //文件提交到本地仓库</p><p>git commit –all -m  “本次提交描述” //两次命令合并提交</p><p>git status 查看文件是否修改或提交</p><h3 id="gitignore设置忽略文件"><a href="#gitignore设置忽略文件" class="headerlink" title="gitignore设置忽略文件"></a>gitignore设置忽略文件</h3><ul><li>新建.gitignore文件配置需要忽略的文件路径 语法<code>/.idea</code>,<code>/.gitignore</code> 以斜杠（/）开头</li></ul><h3 id="git-查看日志-··10"><a href="#git-查看日志-··10" class="headerlink" title="git 查看日志 ··10"></a>git 查看日志 ··10</h3><ul><li>命令<code>git log</code> 列出git全部提交日志</li><li>命令<code>git log --oneline</code>列出简洁版的日志</li><li>命令<code>git log -3</code>展示最近3条日志(了解)</li><li>命令<code>git reflog</code>以查看所有分支的所有操作记录</li></ul><h3 id="git-版本回退"><a href="#git-版本回退" class="headerlink" title="git 版本回退"></a>git 版本回退</h3><ul><li>命令<code>git reset --hard Head~0</code>回退到上次提交的位置</li><li>命令<code>git reset --hard Head~1</code>回退到上上次提交的位置</li><li>等同效果<code>git reset --hard HEAD^</code> 回退到上次提交的位置  </li></ul><h3 id="git通过版本号切换版本-··12，及git-reflog-查看版本操作记录"><a href="#git通过版本号切换版本-··12，及git-reflog-查看版本操作记录" class="headerlink" title="git通过版本号切换版本 ··12，及git reflog 查看版本操作记录"></a>git通过版本号切换版本 ··12，及git reflog 查看版本操作记录</h3><ul><li>命令<code>git reset --hard 版本号信息</code>回退到某个版本号的位置</li><li>命令<code>git reflog</code>以查看所有分支的所有操作记录</li></ul><h3 id="git创建分支，切换分支，查看分支，合并分支"><a href="#git创建分支，切换分支，查看分支，合并分支" class="headerlink" title="git创建分支，切换分支，查看分支，合并分支"></a>git创建分支，切换分支，查看分支，合并分支</h3><ul><li>命令<code>git branch 分支名字</code> 新建一个分支</li><li>命令<code>git branch -d 分支名字</code>删除一个分支<ul><li>先切换到别的分支才能删除这个分支(自己不能杀死自己，360不能卸载360)</li></ul></li><li>命令<code>git checkout 分支名字</code>切换分支</li><li><code>git checkout dev</code>切换分子到dev</li></ul><h3 id="git合并分支时，手动处理冲突-重要-··14"><a href="#git合并分支时，手动处理冲突-重要-··14" class="headerlink" title="git合并分支时，手动处理冲突(重要) ··14"></a>git合并分支时，手动处理冲突(重要) ··14</h3><ul><li><p>切换到要合并到哪里的分支，通常都是合并到master</p></li><li><p>执行命令<code>git merge 要合并的分支名字</code>如<code>git merge dev</code></p></li><li><p>合并过程中如果有冲突，在解决冲突后再提交</p><pre><code>itcast大前端git练习&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD这里是master的内容=======这里是dev分支上的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</code></pre></li></ul><h3 id="git-push命令，把本地把本地代码推送到服务器上"><a href="#git-push命令，把本地把本地代码推送到服务器上" class="headerlink" title="git push命令，把本地把本地代码推送到服务器上"></a>git push命令，把本地把本地代码推送到服务器上</h3><p>git push  仓库地址 master     //推送</p><p>git pull  仓库地址  master(可以不写，默认下载全部)   //下载</p><p>git clone  <strong>***</strong>    克隆到本地</p><p>生成SSH密钥过程：查看是否已经有了ssh密钥：<code>cd ~/.ssh</code>  有就备份删除</p><ul><li><code>ssh-keygen -t rsa -C &#39;kailunxin@gmail.com&#39;</code>按3个回车，密码为空。</li><li>打开.ssh文件下.pub的文件，添加到<code>https://github.com/settings/keys</code>这里是github以后就是你们自己公司的仓库位置</li></ul><h4 id="两个用户push及pull代码及解决冲突"><a href="#两个用户push及pull代码及解决冲突" class="headerlink" title="两个用户push及pull代码及解决冲突"></a>两个用户push及pull代码及解决冲突</h4><p>如果远程仓库内容已经有更新，本地需要先pull,再push ，如果pull时候发生冲突，就要手动修改合并的文件，然后提交，再push到远程仓库</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>前端最好用的框架-Vue</title>
      <link href="/2019/07/27/vue_study/"/>
      <url>/2019/07/27/vue_study/</url>
      
        <content type="html"><![CDATA[<h4 id="1、前端三大框架"><a href="#1、前端三大框架" class="headerlink" title="1、前端三大框架"></a>1、前端三大框架</h4><p>angular(google)—-react(facebook)—–vue（尤雨溪）</p><p>2014年发布，2016年升级2.0</p><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong></p><p>Vue.js 是构建 Web 界面的 <a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a> 库</p><h4 id="2、vue-指令"><a href="#2、vue-指令" class="headerlink" title="2、vue-指令"></a>2、vue-指令</h4><h5 id="1、v-cloak"><a href="#1、v-cloak" class="headerlink" title="1、v-cloak"></a>1、v-cloak</h5><p>​    插值表达式存在的问题：“闪动”   (页面上会短暂显示例如的vue语法字符串)</p><p>​    如何解决该问题：使用v-cloak指令 (先设置属性css,display:none,然后添加到标签上)</p><p>​    解决该问题的原理：先隐藏，替换好值之后再显示最终的值</p><h5 id="2、v-text-填充纯文本"><a href="#2、v-text-填充纯文本" class="headerlink" title="2、v-text   填充纯文本"></a>2、v-text   填充纯文本</h5><h5 id="3、-v-html-可以填充标签语法"><a href="#3、-v-html-可以填充标签语法" class="headerlink" title="3、 v-html    可以填充标签语法"></a>3、 v-html    可以填充标签语法</h5><p>​        存在安全问题</p><p>​        本网站内部数据可以使用，来自第三方的数据不可以用</p><h5 id="4、-v-pre"><a href="#4、-v-pre" class="headerlink" title="4、 v-pre"></a>4、 v-pre</h5><p>​    让vue语法跳过编译，直接暴露vue语法  如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'app'</span> v<span class="token operator">-</span>html<span class="token operator">=</span><span class="token string">"msg3"</span><span class="token operator">></span><span class="token comment" spellcheck="true">//指令会直接替换里面的语法</span>        <span class="token punctuation">{</span><span class="token punctuation">{</span>msg<span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">'text/javascript'</span><span class="token operator">></span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                msg<span class="token punctuation">:</span> <span class="token string">'Hello Vue'</span><span class="token punctuation">,</span>                msg1<span class="token punctuation">:</span> <span class="token string">'Hdasda'</span><span class="token punctuation">,</span>                msg3<span class="token punctuation">:</span> <span class="token string">'&lt;img src="./img/apple.png" alt="">'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h5 id="5、v-once-只编译一次"><a href="#5、v-once-只编译一次" class="headerlink" title="5、v-once 只编译一次"></a>5、v-once 只编译一次</h5><p>（数据响应式，就是数据的改变，会导致页面内容发生变化，而v-once就是让内容显示之后，就不再发生数据响应式）</p><h5 id="6、v-if"><a href="#6、v-if" class="headerlink" title="6、v-if"></a>6、v-if</h5><p>放在标签中，则满足条件的才进行渲染</p><pre><code>&lt;li v-if=&quot;id&lt;3&quot;&gt;{{id}}&lt;/li&gt;</code></pre><p>因为 <code>v-if</code> 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 <code>&lt;template&gt;</code> 元素当做不可见的包裹元素，并在上面使用 <code>v-if</code>。最终的渲染结果将不包含 <code>&lt;template&gt;</code> 元素</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"ok"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>Paragraph <span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>Paragraph <span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span></code></pre><p><code>v-else</code> 元素必须紧跟在带 <code>v-if</code> 或者 <code>v-else-if</code> 的元素的后面，否则它将不会被识别。</p><p>key—————————————–</p><p>所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 <code>key</code> 属性即可：</p><pre><code>&lt;template v-if=&quot;loginType === &#39;username&#39;&quot;&gt;  &lt;label&gt;Username&lt;/label&gt;  &lt;input placeholder=&quot;Enter your username&quot; key=&quot;username-input&quot;&gt;&lt;/template&gt;&lt;template v-else&gt;  &lt;label&gt;Email&lt;/label&gt;  &lt;input placeholder=&quot;Enter your email address&quot; key=&quot;email-input&quot;&gt;&lt;/template&gt;</code></pre><h5 id="7、v-show-显示和隐藏"><a href="#7、v-show-显示和隐藏" class="headerlink" title="7、v-show   显示和隐藏"></a>7、v-show   显示和隐藏</h5><p>不同的是带有 <code>v-show</code> 的元素始终会被渲染并保留在 DOM 中。<code>v-show</code> 只是简单地切换元素的 CSS 属性 <code>display</code>。</p><p>注意，<code>v-show</code> 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</p><pre><code>&lt;h1 v-show=&quot;ok&quot;&gt;Hello!&lt;/h1&gt;</code></pre><h5 id="v-if和v-show-的区别"><a href="#v-if和v-show-的区别" class="headerlink" title="v-if和v-show 的区别"></a>v-if和v-show 的区别</h5><p><code>v-if</code> 也是<strong>惰性的</strong>：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p><p>相比之下，<code>v-show</code> 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p><p>一般来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h5 id="8、v-bind-动态的给元素绑定属性"><a href="#8、v-bind-动态的给元素绑定属性" class="headerlink" title="8、v-bind:动态的给元素绑定属性"></a>8、<code>v-bind</code>:动态的给元素绑定属性</h5><pre><code>new Vue({    el:&#39;#app&#39;,    data:{        url:&#39;http://www.baidu.com/&#39;,        attributeName:&quot;href&quot;    }})&lt;a v-bind:href = &#39;url&#39;&gt;百度&lt;/a&gt;&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;</code></pre><h5 id="9、v-for-循环结构"><a href="#9、v-for-循环结构" class="headerlink" title="9、v-for    循环结构"></a>9、v-for    循环结构</h5><p>​    遍历数组——————————</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>ul<span class="token operator">></span><span class="token operator">&lt;</span>li v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"(item,index) in arr"</span> <span class="token punctuation">:</span>key<span class="token operator">=</span><span class="token string">"item.name"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">{</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token punctuation">{</span>i<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>arr<span class="token punctuation">:</span><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'jack1'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'jack2'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    id<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">'jack3'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><p>​    遍历对象</p><pre><code>&lt;div v-for=&#39;(value,key,index) in object&#39;&gt;{{value+'-'+key+'-'+i}}&lt;/div&gt;&lt;div v-if=&#39;value&#39; v-for=&#39;(value,key,index) in object&#39;&gt;{{value+'-'+key+'-'+i}}&lt;/div&gt;</code></pre><h4 id="3-Vue模板语法"><a href="#3-Vue模板语法" class="headerlink" title="3.Vue模板语法"></a>3.Vue模板语法</h4><h5 id="1、v-model双向数据绑定"><a href="#1、v-model双向数据绑定" class="headerlink" title="1、v-model双向数据绑定"></a>1、v-model双向数据绑定</h5><p>​    数据发生变化，页面内容发生变化，相反页面内容发生变化，数据也发生变化   （数据劫持）</p><pre><code>&lt;!-- v-model 指令只能用于表单元素和组件 常见于input/textarea/select标签上 --&gt;&lt;input type=&#39;text&#39; v-model=&#39;uname&#39;/&gt;&lt;div id=&#39;app&#39;&gt;        username: &lt;input type=&quot;text&quot; v-model=&#39;user&#39; /&gt; &lt;br&gt;          用户名是:{{user}}    &lt;/div&gt;    &lt;script type=&#39;text/javascript&#39;&gt;        var vm = new Vue({            el: &#39;#app&#39;,            data: {                user: &#39;请输入用户名&#39;,                       }        });    &lt;/script&gt;</code></pre><p>表单域修饰符</p><p>v-model.number=’age’//默认获取的input值是字符串，number可以转化为数值</p><p>v-model.trim  :去掉开始和结尾的空格</p><p>v-model.lazy =”username” ,将input事件切换为change事件  </p><p>//也就是说，默认input输入框的值变化，就触发input事件来实现username的值变化，加了lazy后，就是，触发change事件来实现username的值得变化</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">""</span> name<span class="token operator">=</span><span class="token string">""</span> id<span class="token operator">=</span><span class="token string">""</span> value<span class="token operator">=</span><span class="token string">""</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">"username"</span> @input<span class="token operator">=</span><span class="token string">""</span> @change<span class="token operator">=</span><span class="token string">"change"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token comment" spellcheck="true">//触发change事件时，username才更改</span>在默认情况下，v<span class="token operator">-</span>model 在每次 input 事件触发后将输入框的值与数据进行同步 <span class="token punctuation">(</span>除了上述输入法组合文字时<span class="token punctuation">)</span>。你可以添加 lazy 修饰符，从而转变为使用 change 事件进行同步：<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 在“change”时而非“input”时更新 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>input v<span class="token operator">-</span>model<span class="token punctuation">.</span>lazy<span class="token operator">=</span><span class="token string">"msg"</span> <span class="token operator">></span></code></pre><h5 id="2、MVVM设计思想"><a href="#2、MVVM设计思想" class="headerlink" title="2、MVVM设计思想"></a>2、MVVM设计思想</h5><p>​        M(model)  模型层   var vm=new Vue()</p><p>​        V(view)    视图     html</p><p>​        VM(View-Model)    逻辑层      vm对象内的逻辑层</p><p>​        View(Dom)==&gt;View-Model(vue)==&gt;model</p><p>​        View(Dom)&lt;==View-Model(vue)&lt;==model</p><h5 id="3、v-on-事件绑定"><a href="#3、v-on-事件绑定" class="headerlink" title="3、v-on:/@事件绑定"></a>3、v-on:/@事件绑定</h5><pre class=" language-javascript"><code class="language-javascript">事件函数的调用方式    直接绑定函数名称    <span class="token operator">&lt;</span>button v<span class="token operator">-</span>on<span class="token punctuation">:</span>click<span class="token operator">=</span><span class="token string">'say'</span><span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        num<span class="token punctuation">:</span> <span class="token number">222</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 这里的this是Vue的实例对象+</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>​    （1）事件修饰符   </p><p>​        v-on:click.prevent=’say’    //阻止默认行为</p><p>​        v-on:click.stop=’say’    //阻止冒泡</p><p>​    （2）按键修饰符</p><p>​         v-on:keyup.enter=’submit’ 回车事件</p><p>​        v-on:keyup.delete=’handle’  触发delete键</p><p>​        keyup 键盘弹起事件</p><p>​    （3）change 状态改变事件</p><p>​        v-on 可以用@替代</p><p>​    4、属性绑定   v-bind:src=”url”    url是变量名  </p><p>​        作用就是，让浏览器把url当成变量解析，否则会当字符串解析</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>img v<span class="token operator">-</span>bind<span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"url"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>   <span class="token comment" spellcheck="true">//全称</span><span class="token operator">&lt;</span>img <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"url"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>            <span class="token comment" spellcheck="true">//简写</span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'app'</span><span class="token operator">></span>        <span class="token operator">&lt;</span>img v<span class="token operator">-</span>bind<span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"url"</span> alt<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">'text/javascript'</span><span class="token operator">></span>        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"./img/lemon.png"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>​    v-model的底层实现原理</p><pre><code>&lt;input v-bind:value=&quot;msg&quot; v-on:input=&quot;msg=$event.target.value&quot;&gt;绑定value属性， 当input事件触发时，将value值赋值给变量，然后把变量显示在页面上  由于value绑定了，当变量值变化时，value值也会同步变化</code></pre><h5 id="4、样式绑定"><a href="#4、样式绑定" class="headerlink" title="4、样式绑定"></a>4、样式绑定</h5><h5 id="1、class样式处理"><a href="#1、class样式处理" class="headerlink" title="1、class样式处理"></a>1、class样式处理</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span><span class="token keyword">class</span><span class="token string">"{active:isActive}"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token comment" spellcheck="true">//第一种写法</span>    <span class="token comment" spellcheck="true">//isActive=true,代表有这个类名，false代表没有这个类名</span>    <span class="token comment" spellcheck="true">//this.isActive=!this.isActive 可以用来切换类名</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[activeClass, errorClass]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token comment" spellcheck="true">//第二种写法</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> 两者可以结合使用<span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[activeClass, errorClass，{active:isActive}]"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div还可以使用三元表达式方式切换类<span class="token operator">&lt;</span>div v<span class="token operator">-</span>bind<span class="token punctuation">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"[activeClass, errorClass，flag?'c':'']"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token operator">/</span><span class="token boolean">true</span> 之间切换，可以改变类</code></pre><h5 id="2、style内联样式"><a href="#2、style内联样式" class="headerlink" title="2、style内联样式"></a>2、style内联样式</h5><p>​            直接在元素上通过 <code>:style</code> 的形式，书写样式对象</p><pre><code>&lt;h1 :style=&quot;{color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;}&quot;&gt;这是一个善良的H1&lt;/h1&gt;</code></pre><p>​            给元素的 style传递一个对象，对象包含样式参数</p><pre><code>&lt;h1 :style=&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;/h1&gt;data: {        h1StyleObj: { color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; }}</code></pre><p>​            给元素的style传递一个数组，数组中可以包含多个对象</p><pre><code>&lt;h1 :style=&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;/h1&gt;data: {        h1StyleObj: { color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; },        h1StyleObj2: { fontStyle: &#39;italic&#39; }}</code></pre><h4 id="4、自定义指令directive"><a href="#4、自定义指令directive" class="headerlink" title="4、自定义指令directive"></a>4、自定义指令directive</h4><p>​    1、语法规则（全局）</p><pre><code>// 注册一个全局自定义指令 `v-focus`Vue.directive(&#39;focus&#39;, {  // 当被绑定的元素插入到 DOM 中时……  inserted: function (el) {      //el就是获取到的被绑定的元素(DOM元素 )    // 聚焦元素    el.focus()  }})</code></pre><pre><code>&lt;div id=&#39;app&#39;&gt;        {{msg}}        &lt;p v-a=&quot;y&quot;&gt;qq&lt;/p&gt;    &lt;/div&gt;    Vue.directive(&#39;a&#39;,{            bind:function(el,binding){ //钩子函数的参数                console.log(el);                console.log(binding);            }        })钩子函数  bind和insertedbind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。// el 是指令所在的元素对象// bingding是一个对象// binding.value //指令等号后面表达式的值 也就是变量的值// binding.expression // 指令等号后面的表达式  本质就是一个变量</code></pre><p>​    2、自定义私有指令</p><p>如果想注册局部指令，组件中也接受一个 <code>directives</code> 的选项：</p><pre class=" language-JavaScript"><code class="language-JavaScript">var vm = new Vue({            el: '#app',            data: {                msg: 'Hello Vue',                y:'red'            }，            directives: {      //在                  focus: {                   // 指令的定义                    inserted: function (el) {                          el.focus()                    }                  }            }        });</code></pre><p>然后你可以在模板中任何元素上使用新的 <code>v-focus</code> 属性，如下：</p><pre><code>&lt;input v-focus&gt;</code></pre><h4 id="5、过滤器"><a href="#5、过滤器" class="headerlink" title="5、过滤器"></a>5、过滤器</h4><h5 id="1、自定义过滤器filter"><a href="#1、自定义过滤器filter" class="headerlink" title="1、自定义过滤器filter"></a>1、自定义过滤器filter</h5><blockquote><p>在数据展示之前,对原始数据进行处理并返回处理后的数据进行展示,不改变原始数据</p></blockquote><blockquote><p>过滤器只能用在插值表达式和属性绑定(v-bind)中</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//全局过滤器</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'过滤器名称'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// data是原始数据,即管道符前面的数据</span>    <span class="token comment" spellcheck="true">// arg 是使用过滤器时传递的参数</span>    <span class="token comment" spellcheck="true">// 1. 对原始数据进行逻辑处理</span>    <span class="token comment" spellcheck="true">// 2. 处理完成后进行return</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`处理完的数据`</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>原始数据 <span class="token operator">|</span> <span class="token function">过滤器名称</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'upder'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//data就是msg   arg是传参,可以传几个参数</span><span class="token punctuation">}</span><span class="token punctuation">)</span>msg<span class="token operator">=</span><span class="token string">'   222   '</span><span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg <span class="token operator">|</span> upder<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token comment" spellcheck="true">//得到的msg=>'222'</span>相当于把msg放入过滤器函数中执行处理函数，然后返回新的msg值过滤器也可以传参数<span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>msg <span class="token operator">|</span> <span class="token function">upder</span><span class="token punctuation">(</span>aaa<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token comment" spellcheck="true">//得到的msg=>'222'</span></code></pre><p>局部自定义过滤器</p><pre><code>&lt;div&gt;{{msg | aa(aaa)}}&lt;/div&gt; //得到的msg=&gt;&#39;222&#39;var vm = new Vue({            el: &#39;#app&#39;,            data: {                msg: &#39;Hello Vue&#39;,            }，            filters: {                      aa(data,reg){                       return data.trim()                 }                }        });</code></pre><h4 id="6、计算属性computed"><a href="#6、计算属性computed" class="headerlink" title="6、计算属性computed"></a>6、计算属性computed</h4><p>​    用于定义一种可以随着所依赖数据发生变化的属性</p><p>对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"f1"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token operator">=</span><span class="token string">"f2"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// data中定义普通属性</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>           f1<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>           f2<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>           f<span class="token punctuation">:</span><span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// compluted中定义的函数名就是计算属性 属性的值是该函数的返回值</span>    <span class="token comment" spellcheck="true">// 计算属性的值会随着依赖数据的变化而变化</span>    <span class="token comment" spellcheck="true">// 例如this.msg被修改 则comMsg的值也会重新计算</span>    compluted<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>f1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>f2<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>computed  <span class="token operator">===</span><span class="token operator">=</span><span class="token operator">></span>浏览器运行就会执行，只要有函数的属性发生变化，就会再次调用</code></pre><p>计算属性和计算方法</p><p>computed计算属性   基于之前的缓存，如果不发生变化，是不再次计算</p><p>​                    计算的属性来源于data中的属性，属性发生变化就再次调用</p><p>methord计算方法      这里就没有缓存，每次调用都会进行计算</p><h4 id="7、侦听器-watch"><a href="#7、侦听器-watch" class="headerlink" title="7、侦听器 watch"></a>7、侦听器 watch</h4><p>​    //浏览器运行，里面的函数不会执行，也就是函数名的值发生变化，就会执行</p><pre><code>&lt;div id=&#39;app&#39;&gt;        {{msg}}        first&lt;input type=&quot;&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; v-model=&quot;first&quot; /&gt;        last&lt;input type=&quot;&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;&quot; v-model=&quot;last&quot; /&gt;        姓名{{aa}}    &lt;/div&gt;    &lt;script type=&#39;text/javascript&#39;&gt;        var vm = new Vue({            el: &#39;#app&#39;,            data: {                msg: &#39;Hello Vue&#39;,                aa:&#39;wangpeng&#39;,                first:&quot;wang&quot;,                last:&quot;peng&quot;,            },            watch:{                first(newval,oldval){   //first的值改变,就执行这个函数,然后值赋值给aa，因为是双向绑定，也就是input值变，就执行这个函数                函数会有缓存，oldval记录上一次的值，newval是当前变化后的值                    this.aa=this.first+this.last                    // this.aa=val+this.last                },                last(val){   //first的值改变,就执行这个函数,然后值赋值给aa                    this.aa=this.first+this.last                    // this.aa=this.first+val                }            }        });    &lt;/script&gt;</code></pre><h4 id="8、生命周期"><a href="#8、生命周期" class="headerlink" title="8、生命周期"></a>8、生命周期</h4><p>​    阶段</p><p>挂载（初始化相关属性）—更新（元素或组件的变更操作）—销毁（销毁相关属性）</p><p>—————–挂载—————–和methods同级别的加载函数</p><p>1、beforeCreate函数//在这个阶段，data中的数据和methods中的函数都没加载完就执行了函数,</p><p>2、created/beforeMount/mounted函数//在这个阶段，data中的数据和methods中的函数加载完了就执行了函数，</p><p>3、created加载时，dom结构还没加载完（重点）</p><p>4、deforeMount加载时，dom结构加载完了，但是动态数据还没解析</p><p>5、mounted加载时，dom结构加载完，数据已解析//相当于window.onload（重点）</p><h4 id="9、数组相关API"><a href="#9、数组相关API" class="headerlink" title="9、数组相关API"></a>9、数组相关API</h4><p>1、变异方法(修改原有数据)push() pop() shift() unshift() splice() sort() reverse()</p><ol start="2"><li>替换数组(生成新的数组)filter()concat()slice()</li><li>修改响应式数据Vue.set(vm.items, indexOfItem, newValue)vm.$set(vm.items, indexOfItem, newValue)参数一表示要处理的数组名称参数二表示要处理的数组的索引参数三表示要处理的数组的值</li></ol><h4 id="10、组件化component"><a href="#10、组件化component" class="headerlink" title="10、组件化component"></a>10、组件化component</h4><h5 id="1、全局组件创建–调用"><a href="#1、全局组件创建–调用" class="headerlink" title="1、全局组件创建–调用"></a>1、全局组件创建–调用</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>btn<span class="token operator">-</span>counter<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>btn<span class="token operator">-</span>counter<span class="token operator">></span>  <span class="token comment" spellcheck="true">//调用</span><span class="token comment" spellcheck="true">//注册  组件名建议小写，如果使用驼峰命名，大写会报错，不能用关键字</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'btn-counter'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      count<span class="token punctuation">:</span><span class="token number">0</span>   <span class="token comment" spellcheck="true">//模板中需要使用的参数</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//template模板只能有一个外层标签 </span>  template<span class="token punctuation">:</span><span class="token string">'&lt;button @click='</span>add<span class="token string">'>点击了{{count}}&lt;/button>'</span><span class="token punctuation">,</span>   methods<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      count<span class="token operator">++</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">模板可以采用ES6的模板字符串<span class="token template-string"><span class="token string">`****`</span></span>  <span class="token punctuation">,</span>这种方式适用于结构复杂的模板结构template<span class="token punctuation">:</span><span class="token template-string"><span class="token string">`&lt;div>    &lt;button @click="add">点击了{{count}}次&lt;/button>    &lt;button @click="add">点击了{{count}}次&lt;/button>&lt;/div>`</span></span></code></pre><h5 id="2、局部组件创建–注册—调用"><a href="#2、局部组件创建–注册—调用" class="headerlink" title="2、局部组件创建–注册—调用"></a>2、局部组件创建–注册—调用</h5><p>//其中data必须是一个函数，里面写一个return对象，其中包含值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> hello<span class="token operator">-</span>world<span class="token operator">=</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//定义组件</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">{</span>      msg<span class="token punctuation">:</span><span class="token string">'hello'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span><span class="token string">"&lt;div>{{msg}}&lt;/div>"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在里面注册</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            components<span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//注册</span>              hello<span class="token operator">-</span>world            <span class="token punctuation">}</span></code></pre><h5 id="3、父组件向子组件传值"><a href="#3、父组件向子组件传值" class="headerlink" title="3、父组件向子组件传值"></a>3、父组件向子组件传值</h5><p>实现原理：通过在父属性中调用来获取值，然后传递给自己的props,再传到模板template，然后模板渲染在页面上</p><pre><code> &lt;div id=&#39;app&#39;&gt;      &lt;father :aa=&quot;msg&quot; :bb=&quot;msg2&quot;&gt;&lt;/father&gt; //在vm组件中调用father子组件    &lt;/div&gt;     ------------------------------------- var  father={  //vm的子组件            template:&quot;&lt;div&gt;这是一个father组件==={{aa}}=={{bb}}  &lt;son :bb=&#39;ft&#39;&gt;&lt;/son&gt;&lt;/div&gt;&quot;,            data(){                return  {                }            },            methods:{},            props:[&quot;aa&quot;,&quot;bb&quot;]  //值通过调用组件时获取,然后传给当前的模板        }        --------------------------------- var vm = new Vue({   //vm父组件            el: &#39;#app&#39;,            data: {                msg: &#39;Hello Vue&#39;, //要传递的值                msg2: &#39;Hello world&#39;,            },            components:{                father:father //注册子组件            }        });</code></pre><h5 id="4、子组件向父组件传递值"><a href="#4、子组件向父组件传递值" class="headerlink" title="4、子组件向父组件传递值"></a>4、子组件向父组件传递值</h5><p>​    实现原理：子组件dom绑定实例事件，触发普通函数来条用$emit来触发传入的自定义事件，然后调用的子组件上绑定了这个自定义事件，并传值，自定义事件被触发，立即调用父组件的普通函数，父组件获取到了传递的值，赋值保存。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">'app'</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//调用vm的子组件</span>        <span class="token operator">&lt;</span>father <span class="token punctuation">:</span>aa<span class="token operator">=</span><span class="token string">"msg"</span> @event_get<span class="token operator">=</span><span class="token string">"show"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>father<span class="token operator">></span>          <span class="token comment" spellcheck="true">//绑定自定义事件 监听子组件的事件</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>script <span class="token operator">></span>         <span class="token keyword">var</span> father<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//定义内置组件</span>          <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">{</span>              str<span class="token punctuation">:</span><span class="token string">'子组件向父组件传递参数'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          template<span class="token punctuation">:</span><span class="token string">"&lt;button @click='get'>点击&lt;/button>"</span><span class="token punctuation">,</span>           <span class="token comment" spellcheck="true">//当点击这个div，就触发get函数，</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//触发get，然后$emit()自动触发事件event_get，而调用的时候，这个事件绑定了vm组件的show函数，于是执行show函数，并传递一个子组件的参数给show</span>        <span class="token comment" spellcheck="true">//同时子组件可以通过调用内建的 $emit 方法 并传入事件名称来触发一个事件：</span>          <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'event_get'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> vm<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span>            <span class="token punctuation">{</span>              el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>              data<span class="token punctuation">:</span><span class="token punctuation">{</span>                app<span class="token punctuation">:</span><span class="token string">""</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              methods<span class="token punctuation">:</span><span class="token punctuation">{</span>                <span class="token function">show</span><span class="token punctuation">(</span>mes<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">this</span><span class="token punctuation">.</span>app<span class="token operator">=</span>mes  <span class="token comment" spellcheck="true">//将获取的值赋值给当前组件的属性，存起来，可用于使用这个传递过来的值</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script <span class="token operator">></span></code></pre><h5 id="5、兄弟组件之间数据传递"><a href="#5、兄弟组件之间数据传递" class="headerlink" title="5、兄弟组件之间数据传递"></a>5、兄弟组件之间数据传递</h5><pre><code>//定义事件中心var eventHub=new Vue()var a={    template:&quot;&lt;div @click=&quot;aa&quot;&gt;a组件&lt;/div&gt;&quot;, //绑定一个事件函数  data(){    return {      num_a:&#39;&#39;    }  },  methods:{    aa(){      eventHub.$emit(&#39;a_b&#39;,&quot;这是a传递的值&quot;)  //触发事件a_b    }  }}var b={    template:&quot;&lt;div &gt;b组件===={{str_b}}&lt;/div&gt;&quot;, //绑定一个事件函数  data(){    return{      str_b:&#39;&#39;    }  },  mounted(){    eventHub.$on(&#39;a_b&#39;,(mes)=&gt;{    //监听事件a_b      this.str_b=mes   //将a触发事件传递给b的监听事件    })  }}var vm = new Vue({            el: &#39;#app&#39;,            data: {                msg: &#39;Hello Vue&#39;,                app:&quot;&quot;            },            components:{                father:father            },            methods:{                show(message){                    this.app=message;                    console.log(message,1111)                }            }        });</code></pre><h4 id="11、插槽"><a href="#11、插槽" class="headerlink" title="11、插槽"></a>11、插槽</h4><h5 id="1、插槽创建"><a href="#1、插槽创建" class="headerlink" title="1、插槽创建"></a>1、插槽创建</h5><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;alert-box&gt;有bug发生&lt;/alert-box&gt;  &lt;/div&gt;  Vue.component(&#39;alert-box&#39;, {      template: `        &lt;div&gt;          &lt;strong&gt;ERROR:&lt;/strong&gt;          &lt;slot&gt;默认内容&lt;/slot&gt;    //将上面的内容替换掉slot，显示在页面上        &lt;/div&gt;      `    });    var vm = new Vue({      el: &#39;#app&#39;,      data: {      }    });</code></pre><h5 id="2、具名插槽"><a href="#2、具名插槽" class="headerlink" title="2、具名插槽"></a>2、具名插槽</h5><pre class=" language-javascript"><code class="language-javascript">就是利用<span class="token operator">&lt;</span>slot<span class="token operator">></span>元素的name属性，来定义专属的插槽，不待name的<span class="token operator">&lt;</span>slot<span class="token operator">></span> 是通用的<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>base<span class="token operator">-</span>layout<span class="token operator">></span>  <span class="token comment" spellcheck="true">//自动将指定的盒子内容放入header的slot插槽中   不一定需要template包裹</span>      <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">'header'</span><span class="token operator">></span>            <span class="token operator">&lt;</span>p<span class="token operator">></span>标题信息<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>标题信息<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>主要内容<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>   <span class="token comment" spellcheck="true">//此处的内容默认放入没有name的slot卡槽中</span>      <span class="token operator">&lt;</span>p<span class="token operator">></span>主要内容<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>template slot<span class="token operator">=</span><span class="token string">'footer'</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">//自动将指定的模板放入footer的slot插槽中</span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>底部信息信息<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>底部信息信息<span class="token number">2</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>base<span class="token operator">-</span>layout<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">//组件------------</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'base-layout'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;div>          &lt;header>            &lt;slot name='header'>&lt;/slot>   //给&lt;slot>插槽命名，          &lt;/header>          &lt;main>            &lt;slot>&lt;/slot>          &lt;/main>          &lt;footer>            &lt;slot name='footer'>&lt;/slot>          &lt;/footer>        &lt;/div>      `</span></span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="3、作用域插槽用法"><a href="#3、作用域插槽用法" class="headerlink" title="3、作用域插槽用法"></a>3、作用域插槽用法</h5><pre class=" language-JavaScript"><code class="language-JavaScript">//让插槽内容能够访问子组件中才有的数据是很有用的。<div id='app'>  //调用组件        <father :arr='arr'>  //将父组件的arr传递给father组件           //通过slot-scope方法将slot插槽获取的info存入slotProps,          //在 <template> 上使用特殊的 slot-scope 特性，可以接收传递给插槽的参数，这里使用了绑定属性            <template slot-scope='slotProps' slot='main'>                  <span>{{slotProps.info.name}}</span>            </template>        </father>    </div>    //创建father组件,Vue.component('father',{            props:['arr'], //通过father组件的props接收arr            data(){},            template:`<div>                <main>                    <div :key='item.id' v-for='item in arr'>   //arr获取的每一项item传递给slot                    <slot name='main' :info='item'>{{item.name}}</slot>                      </div>                </main>            </div>`        })</code></pre><h4 id="12、Promise用法"><a href="#12、Promise用法" class="headerlink" title="12、Promise用法"></a>12、Promise用法</h4><h5 id="1、传统异步编程思维"><a href="#1、传统异步编程思维" class="headerlink" title="1、传统异步编程思维"></a>1、传统异步编程思维</h5><pre><code>javascript是单线程的，所以需要依靠异步执行回调函数来实现传统意义上，ajax是异步的，如果要实现依赖关系，就必须嵌套，否则不按照顺序执行这样嵌套多了，代码就会越来越复杂，可读性差</code></pre><h5 id="2、Promise函数概述"><a href="#2、Promise函数概述" class="headerlink" title="2、Promise函数概述"></a>2、Promise函数概述</h5><pre class=" language-html"><code class="language-html">也就是先执行ajax逻辑，最后通过成功或者失败来调用相应的函数Promise是异步编程的一种解决方案，好处：避免多层异步调用嵌套Promise对象提供了APIPromise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject.    resolve函数的作用是，将 Promise 对象的状态从 未处理 变成 处理成功 (unresolved => resolved)， 在异步操作成功时调用，并将异步操作的结果作为参数传递出去。    reject函数的作用是，将 Promise 对象的状态从 未处理 变成 处理失败 (unresolved => rejected), 在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。    Promise 实例生成以后，可以用 then 方法的两个回调函数指定 resolved 状态和 rejected 状态的回调函数。</code></pre><h5 id="3、Promise使用"><a href="#3、Promise使用" class="headerlink" title="3、Promise使用"></a>3、Promise使用</h5><pre class=" language-javascript"><code class="language-javascript">实例化，两个回调函数，resole成功执行，reject失败执行<span class="token keyword">var</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token boolean">true</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">reslove</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//成功执行的函数，传参</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'出错了'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//失败执行的函数，传参</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">实例对象的then方法，传入两个实参</span><span class="token punctuation">(</span>函数<span class="token punctuation">)</span> data<span class="token operator">/</span>info 是上面执行函数的传参p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>​    4、Promise的实现</p><pre class=" language-JavaScript"><code class="language-JavaScript">//通过then，可以实现异步函数安装一定的顺序执行// 0.5秒后返回input*input的计算结果:function multiply(input) {    return new Promise(function (resolve, reject) {        log('calculating ' + input + ' x ' + input + '...');        setTimeout(resolve, 500, input * input);    });}// 0.5秒后返回input+input的计算结果:function add(input) {    return new Promise(function (resolve, reject) {        log('calculating ' + input + ' + ' + input + '...');        setTimeout(resolve, 500, input + input);    });}var p = new Promise(function (resolve, reject) {    log('start new Promise...');    resolve(123);});p.then(multiply) .then(add) .then(multiply) .then(add) .then(function (result) {    log('Got value: ' + result);  });Log:  //打印结果start new Promise...calculating 123 x 123...calculating 15129 + 15129...calculating 30258 x 30258...calculating 915546564 + 915546564...Got value: 1831093128</code></pre><h4 id="13Promise常用API"><a href="#13Promise常用API" class="headerlink" title="13Promise常用API"></a>13Promise常用API</h4><p>​    Promise.all()</p><pre><code>Promise.all([p1,p2])方法接受一个数组做参数，数组对象p1,p2都是Promise的实例对象，得到的是三个返回值（如果不是一个promise，该项会被用Promise.resolve转换为一个promise)。它的状态由这三个promise实例决定</code></pre><p>​    Promise.race()</p><pre><code>Promise.race方法同样接受一个数组作参数。当p1, p2, p3中有一个实例的状态发生改变（变为fulfilled或rejected），p的状态就跟着改变。并把第一个改变状态的promise的返回值，传给p的回调函数</code></pre><h5 id="2、fetch"><a href="#2、fetch" class="headerlink" title="2、fetch"></a>2、fetch</h5><p>Fetch API是新的ajax解决方案 Fetch会返回Promise</p><ul><li><strong>fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</strong>。</li><li>fetch(url, options).then(）</li></ul><h5 id="3、axios"><a href="#3、axios" class="headerlink" title="3、axios"></a>3、axios</h5><blockquote><p>axios是一个基于promise的请求库,可以在node环境和浏览器环境中使用。</p></blockquote><ol><li>引入axios</li></ol><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://unpkg.com/axios/dist/axios.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>全局的 axios 默认值</p><pre><code>//设置基准请求路径axios.defaults.baseURL = &#39;https://api.example.com&#39;;  //设置请求头axios.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded&#39;;</code></pre><p>get请求</p><pre class=" language-js"><code class="language-js"> # <span class="token number">2.1</span>  通过传统的url  以 <span class="token operator">?</span> 的形式传递参数    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios?id=123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> # <span class="token number">2.2</span>  restful 形式传递参数     axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios/123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span># <span class="token number">2.3</span>  通过params  形式传递参数     axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      params<span class="token punctuation">:</span> <span class="token punctuation">{</span>        id<span class="token punctuation">:</span> <span class="token number">789</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>delete请求</p><pre><code>axios delete 请求传参     传参的形式和 get 请求一样    axios.delete(&#39;http://localhost:3000/axios&#39;, {      params: {        id: 111      }    }).then(function(ret){      console.log(ret.data)    })</code></pre><p>post请求</p><pre class=" language-js"><code class="language-js"> # <span class="token number">4.1</span>  通过选项传递参数    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>      pwd<span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    # <span class="token number">4.2</span>  通过 URLSearchParams  传递参数     <span class="token keyword">var</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> <span class="token string">'111'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/axios'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>获取当前地址栏的指定参数，比如id<span class="token comment" spellcheck="true">//new URlSearchParams(location.search).get('id')</span></code></pre><p>put请求</p><pre><code>#5  axios put 请求传参   和 post 请求一样     axios.put(&#39;http://localhost:3000/axios/123&#39;, {      uname: &#39;lisi&#39;,      pwd: 123    }).then(function(ret){      console.log(ret.data)    })</code></pre><h5 id="4、axios拦截器"><a href="#4、axios拦截器" class="headerlink" title="4、axios拦截器"></a>4、axios拦截器</h5><p><a href="http://www.axios-js.com/zh-cn/docs/" target="_blank" rel="noopener">http://www.axios-js.com/zh-cn/docs/</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//在请求或响应被 then 或 catch 处理前拦截它们。每次客户端请求或者服务端响应都要拦截处理</span><span class="token comment" spellcheck="true">// 添加请求拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在发送请求之前做些什么</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对请求错误做些什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 添加响应拦截器</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对响应数据做点什么</span>    <span class="token keyword">return</span> response<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对响应错误做点什么</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="5、async和await"><a href="#5、async和await" class="headerlink" title="5、async和await"></a>5、async和await</h5><pre><code>- async作为一个关键字放到函数前面  - 任何一个async函数都会隐式返回一个promise- await关键字只能在使用async定义的函数中使用  -     await后面可以直接跟一个 Promise实例对象  -      await函数不能单独使用- async/await 让异步代码看起来、表现起来更像同步代码</code></pre><h5 id="14、路由"><a href="#14、路由" class="headerlink" title="14、路由"></a>14、路由</h5><blockquote><p>后端路由:监听不同的URI(地址),做不同的请求处理</p></blockquote><blockquote><p>前端路由:是专门为SPA(单页应用程序)服务,也是监听不同的地址,做页面的切换</p><p>模拟路由</p></blockquote><pre><code> &lt;!-- 根据 :is 属性指定的组件名称，把对应的组件渲染到 component 标签所在的位置 --&gt;      &lt;!-- 可以把 component 标签当做是【组件的占位符】 --&gt;      &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;       // #region 定义需要被切换的 4 个组件      // 主页组件      const zhuye = {        template: &#39;&lt;h1&gt;主页信息&lt;/h1&gt;&#39;      }      // 科技组件      const keji = {        template: &#39;&lt;h1&gt;科技信息&lt;/h1&gt;&#39;      }      // 财经组件      const caijing = {        template: &#39;&lt;h1&gt;财经信息&lt;/h1&gt;&#39;      }      // 娱乐组件      const yule = {        template: &#39;&lt;h1&gt;娱乐信息&lt;/h1&gt;&#39;      }      // 注册私有组件        components: {          zhuye,          keji,          caijing,          yule        }</code></pre><h5 id="1、路由使用"><a href="#1、路由使用" class="headerlink" title="1、路由使用"></a>1、路由使用</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Hello App<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>  <span class="token operator">&lt;</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用 router<span class="token operator">-</span>link 组件来导航<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通过传入 <span class="token template-string"><span class="token string">`to`</span></span> 属性指定链接<span class="token punctuation">.</span> <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token operator">&lt;</span>router<span class="token operator">-</span>link<span class="token operator">></span> 默认会被渲染成一个 <span class="token template-string"><span class="token string">`&lt;a>`</span></span> 标签 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/foo"</span><span class="token operator">></span>Go to Foo<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">"/bar"</span><span class="token operator">></span>Go to Bar<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 路由出口 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 路由匹配到的组件将渲染在这里 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 1. 定义 (路由) 组件。</span><span class="token comment" spellcheck="true">// 可以从其他文件 import 进来</span><span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">'&lt;div>foo&lt;/div>'</span> <span class="token punctuation">}</span><span class="token keyword">const</span> Bar <span class="token operator">=</span> <span class="token punctuation">{</span> template<span class="token punctuation">:</span> <span class="token string">'&lt;div>bar&lt;/div>'</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 2. 定义路由</span><span class="token comment" spellcheck="true">// 每个路由应该映射一个组件。 其中"component" 可以是</span><span class="token comment" spellcheck="true">// 通过 Vue.extend() 创建的组件构造器，</span><span class="token comment" spellcheck="true">// 或者，只是一个组件配置对象。</span><span class="token comment" spellcheck="true">// 我们晚点再讨论嵌套路由。</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/foo'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Foo <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">'/bar'</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> Bar <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 3. 创建 router 实例，然后传 `routes` 配置</span><span class="token comment" spellcheck="true">// 你还可以传别的配置参数, 不过先这么简单着吧。</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes <span class="token comment" spellcheck="true">// (缩写) 相当于 routes: routes</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4. 创建和挂载根实例。</span><span class="token comment" spellcheck="true">// 记得要通过 router 配置参数注入路由，</span><span class="token comment" spellcheck="true">// 从而让整个应用都有路由功能</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 将vuerouter对象注册到Vue内部,以保证在托管区域中可以使用VueRouter内部提供的组件以及其他属性和方法</span>    router<span class="token punctuation">:</span>router<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="2、路由嵌套"><a href="#2、路由嵌套" class="headerlink" title="2、路由嵌套"></a>2、路由嵌套</h5><pre><code>//register组件里面写跳转标签router-linkconst Register={            template:`&lt;div&gt;,                &lt;h1&gt;注册组件&lt;/h1&gt;                &lt;hr/&gt;                &lt;router-link to=&#39;/register/tab1&#39;&gt;tab1&lt;/router-login&gt;                &lt;router-link to=&#39;/register/tab2&#39;&gt;tab2&lt;/router-login&gt;                &lt;router-view /&gt; //填充子组件            &lt;/div&gt;`        }        //创建register组件要跳转的的子组件const Tab1={            template:&#39;&lt;h3&gt;tab1子组件&lt;/h3&gt;&#39;        }        const Tab2={            template:&#39;&lt;h3&gt;tab2子组件&lt;/h3&gt;&#39;        }    const router = new VueRouter({ // 所有的路由规则 ，在register规则中通过children数组中继续嵌套路由规则，跳转子组件          routes: [              { path: &#39;/&#39;, redirect: &#39;/login&#39; },            { path: &#39;/login&#39;, component: User },            { path: &#39;/register&#39;, component: Register ,children:[                { path: &#39;/register/tab1&#39;, component: Tab1 },                { path: &#39;/register/tab2&#39;, component: Tab2 }            ]}          ]        })</code></pre><h5 id="3、动态匹配路由"><a href="#3、动态匹配路由" class="headerlink" title="3、动态匹配路由"></a>3、动态匹配路由</h5><p>1、$route.params.id</p><pre><code>&lt;div id=&#39;app&#39;&gt;        //通过传递id,模板中$route.params.id来接收id值        &lt;router-link to=&quot;/user/1&quot;&gt;user1&lt;/router-link&gt;           &lt;router-link to=&quot;/user/2&quot;&gt;user2&lt;/router-link&gt;        &lt;router-link to=&quot;/user/3&quot;&gt;user3&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;const User = {  template: &#39;&lt;div&gt;User {{ $route.params.id }}&lt;/div&gt;&#39;}const router = new VueRouter({  routes: [    // 动态路径参数 以冒号开头    { path: &#39;/user/:id&#39;, component: User }       ]})</code></pre><p>2、props:true</p><pre><code>通过链接传值，路由开启props:true,组件的props接收参数，传递给组件模板&lt;div id=&#39;app&#39;&gt;        &lt;router-link to=&quot;/user/1&quot;&gt;user1&lt;/router-link&gt;        &lt;router-link to=&quot;/user/2&quot;&gt;user2&lt;/router-link&gt;        &lt;router-link to=&quot;/user/3&quot;&gt;user3&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;        const user={            props:[&#39;id&#39;],            template:&#39;&lt;div&gt;user组件---{{id}}&lt;/div&gt;&#39;        }        var router=new VueRouter({            routes:[                {path:&#39;/user/:id&#39;,component:user,props:true}            ]        })        可以这样传递多个参数，props来接收        &lt;router-link to=&quot;/user/1/jack&quot;&gt;user1&lt;/router-link&gt;        {path:&#39;/user/:id/:uname&#39;,component:user,props:true}</code></pre><p>3， { path: ‘/user/:id’, component: User, props: { uname: ‘lisi’, age: 20 } }</p><p>此方法，路由可以传递多个参数</p><p>props:[‘id’,’age’,’uname’],接收多个参数 ，但是id就失去作用了</p><p>4、props: route =&gt; ({ uname: ‘zs’, age: 20, id: route.params.id })  传递多个参数</p><pre><code>通过hash地址指向路由，路由接收id，并通过propsroutes: [          { path: &#39;/&#39;, redirect: &#39;/user&#39; },          {            path: &#39;/user/:id&#39;,            component: User,            props: route =&gt; ({ uname: &#39;zs&#39;, age: 20, id: route.params.id })          },        ]</code></pre><p>5、命名路由</p><pre><code>to需要属性动态绑定  ：to&lt;router-link :to=&quot;{name:&#39;user&#39;,params:{id:3}}&quot;&gt;user3&lt;/router-link&gt; var router = new VueRouter({                routes: [{                    name:&#39;user&#39;,                    path: &#39;/user/:id&#39;,                    component: user,                    props: route =&gt; ({                        uname: &#39;jack&#39;,                        id: route.params.id                    })                }]            })    </code></pre><p>4、路由组件传参  ？？？</p><pre><code> 1,$route.params.id 捕获router路由的路径传参，但是在组件中使用 $route 会使之与其对应路由形成高度耦合 2、使用props解耦，也能得到参数，想要在组件中通过props获得参数，必须在每个路由path中添加props用于开启props  ， 这样你便可以在任何地方使用该组件 布尔模式：props:true,</code></pre><p>5、编程式导航</p><pre><code>声明式 &lt;router-link :to=&quot;...&quot;&gt;    编程式 router.push(...)想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。在Vue内部，可以调用this.$router.push(&#39;/register&#39;)，来跳转                this.$router.go(-1)，后退一步                router.go(1) 前进一步</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/27/hello-world/"/>
      <url>/2019/07/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
